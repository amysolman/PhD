writeLines("There are")
nrow(xii)
writeLines("archaeal ASVs in the intermediate Arctic subcommunity.")
xii
writeLines("There are")
nrow(xiii)
writeLines("archaeal ASVs in the rare Arctic subcommunity.")
xiii
writeLines("There are")
nrow(yi)
writeLines("archaeal ASVs in the abundant Antarctic subcommunity.")
yi
writeLines("There are")
nrow(yii)
writeLines("archaeal ASVs in the intermediate Antarctic subcommunity.")
yii
writeLines("There are")
nrow(yiii)
writeLines("archaeal ASVs in the rare Antarctic subcommunity.")
yiii
sink()
rm(list=ls())
library(ggplot2)
library(phyloseq)
library(patchwork)
library(ggpubr)
library(glue)
library(tibble) # for add_column
library(reshape2)
library(cowplot)
library(betapart)
library(dplyr)
# 3. Import data and separate into Arctic and Antarctic samples
# 2. Import data
pro <- readRDS("../results/16S-phylo-object-sub-coms-merged.rds")
euk <- readRDS("../results/18S-phylo-object-sub-coms-merged.rds")
###################################################################################################
###################################################################################################
#Ordination by group (Prokaryotes/Eukaryotes) with NMDS and bray curtis dissimilarities
set.seed(666)
#PROKARYOTES
ps = pro
#remove taxa or samples with zero counts
ps = filter_taxa(ps, function(x) sum(x) >= 1, TRUE)
ps = prune_samples(sample_sums(ps)>=1, ps)
#normalise the data by transforming into relative abundance because our subcommunity sizes will be different
ps.RA = transform_sample_counts(ps, function(x) x / sum(x) )
#perform ordination on bray curtis distances
ordBR <- ordinate(ps.RA, method="NMDS", distance="bray")
pro_stress = round(ordBR$stress,3) #stress 0.09
#extract data for plotting
positions <- ordBR$points[,1:2]
colnames(positions) <- c("NMDS1", "NMDS2")
#give sample names as row names and add regions and poles
data2plot = positions %>%
as_tibble(rownames = "samples") %>%
add_column(data.frame(sample_data(ps.RA))$Subcommunity, data.frame(sample_data(ps.RA))$Region, data.frame(sample_data(ps.RA))$Pole)
names(data2plot) = c("Sample", "NMDS1", "NMDS2",  "Subcommunity", "Region", "Pole")
#default legend order
data2plot$Region <- factor(data2plot$Region, levels=c("Greenland", "Svalbard", "Sweden", "Southern Victoria Land", "Queen Maud Land"))
data2plot$Pole <- factor(data2plot$Pole, levels=c("Arctic", "Antarctic"))
data2plot$Subcommunity <- factor(data2plot$Subcommunity, levels=c("Rare", "Intermediate", "Abundant"))
#plot the data
p.nmds.1 = ggplot(data=data2plot) +
geom_point(data=data2plot, aes(x=NMDS1, y=NMDS2, fill=Subcommunity, shape=Pole),
alpha=.5, size=4)+
annotate("text",x=-Inf,y=-Inf,hjust=-7.5,vjust=-0.5,label=paste0("Stress:", round(ordBR$stress, 2)))+
theme_bw()+
scale_shape_manual(values = c(22,24))+
scale_fill_manual(values=c("#82ca81", "#74a9d8", "#ef7a76"))+
guides(fill=guide_legend(override.aes=list(shape=21, size=5, alpha=0.8), order = 1),
shape = guide_legend(override.aes=list(size=5), order = 2),
color = "none")+
stat_ellipse(aes(x=NMDS1, y=NMDS2, color=Subcommunity),type = "norm")+
scale_color_manual(values=c("#82ca81", "#74a9d8", "#ef7a76"))+
theme(legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(size=20))+
ggtitle("Prokaryote")
pdf("../results/prokaryote-bray-nmds-both-poles.pdf", width=8, height=6)
print(p.nmds.1)
dev.off()
set.seed(666)
#EUKARYOTES
ps = euk
#remove taxa or samples with zero counts
ps = filter_taxa(ps, function(x) sum(x) >= 1, TRUE)
ps = prune_samples(sample_sums(ps)>=1, ps)
#normalise the data by transforming into relative abundance because our subcommunity sizes will be different
ps.RA = transform_sample_counts(ps, function(x) x / sum(x) )
#perform ordination on bray curtis distances
ordBR <- ordinate(ps.RA, method="NMDS", distance="bray")
euk_stress = round(ordBR$stress,3) #stress 0.09
#extract data for plotting
positions <- ordBR$points[,1:2]
colnames(positions) <- c("NMDS1", "NMDS2")
#give sample names as row names and add regions and poles
data2plot = positions %>%
as_tibble(rownames = "samples") %>%
add_column(data.frame(sample_data(ps.RA))$Subcommunity, data.frame(sample_data(ps.RA))$Region, data.frame(sample_data(ps.RA))$Pole)
names(data2plot) = c("Sample", "NMDS1", "NMDS2",  "Subcommunity", "Region", "Pole")
#default legend order
data2plot$Region <- factor(data2plot$Region, levels=c("Greenland", "Svalbard", "Sweden", "Southern Victoria Land", "Queen Maud Land"))
data2plot$Pole <- factor(data2plot$Pole, levels=c("Arctic", "Antarctic"))
data2plot$Subcommunity <- factor(data2plot$Subcommunity, levels=c("Rare", "Intermediate", "Abundant"))
#plot the data
#plot the data
p.nmds.2 = ggplot(data=data2plot) +
geom_point(data=data2plot, aes(x=NMDS1, y=NMDS2, fill=Subcommunity, shape=Pole),
alpha=.5, size=4)+
annotate("text",x=-Inf,y=-Inf,hjust=-7.5,vjust=-0.5,label=paste0("Stress:", round(ordBR$stress, 2)))+
theme_bw()+
scale_shape_manual(values = c(22,24))+
scale_fill_manual(values=c("#82ca81", "#74a9d8", "#ef7a76"))+
guides(fill=guide_legend(override.aes=list(shape=21, size=5, alpha=0.8), order = 1),
shape = guide_legend(override.aes=list(size=5), order = 2),
color = "none")+
stat_ellipse(aes(x=NMDS1, y=NMDS2, color=Subcommunity),type = "norm")+
scale_color_manual(values=c("#82ca81", "#74a9d8", "#ef7a76"))+
theme(legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(size=20))+
ggtitle("Eukaryote")
#geom_text(x=-Inf,y=-Inf,hjust=-7.5,vjust=-0.5,label=paste0("Stress:", round(ordBR$stress, 2)))
pdf("../results/eukaryote-bray-nmds-both-poles.pdf", width=8, height=6)
print(p.nmds.2)
dev.off()
###################################################################################################
###################################################################################################
#Report NMDS Stress Results
sink("../results/nmds-stress.txt", type="output")
writeLines("===============================================================
NMDS STRESS RESULTS
===============================================================")
writeLines("NMDS stress values below 0.05 indicate a good fit, 0.05-0.1 are a fair fit, 0.1-0.2 is a poor fit, 0.2-0.3 is a failed fit.")
writeLines("NMDS stress for prokaryote dataset with Bray-Curtis Dissimilarities:")
pro_stress
writeLines("NMDS stress for eukaryote dataset with Bray-Curtis Dissimilarities:")
euk_stress
sink()
###################################################################################################
###################################################################################################
#Combine with boxplot
#BETA DIVERSITY BOXPLOTS
#for saving our dataframes
keep.df = data.frame()
#####PROKARYOTES ARCTIC##########
#get bray-curtis distance matrix and melt
sub = subset_samples(pro, Subcommunity == "Abundant" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Prokaryote"
df$pole = "Arctic"
df$Subcommunity = "Abundant"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(pro, Subcommunity == "Intermediate" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Prokaryote"
df$pole = "Arctic"
df$Subcommunity = "Intermediate"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(pro, Subcommunity == "Rare" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Prokaryote"
df$pole = "Arctic"
df$Subcommunity = "Rare"
keep.df = rbind(keep.df, df)
#####PROKARYOTES ANTARCTIC##########
#get bray dissimilarities matrix and melt
sub = subset_samples(pro, Subcommunity == "Abundant" & Pole == "Antarctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Prokaryote"
df$pole = "Antarctic"
df$Subcommunity = "Abundant"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(pro, Subcommunity == "Intermediate" & Pole == "Antarctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Prokaryote"
df$pole = "Antarctic"
df$Subcommunity = "Intermediate"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(pro, Subcommunity == "Rare" & Pole == "Antarctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Prokaryote"
df$pole = "Antarctic"
df$Subcommunity = "Rare"
keep.df = rbind(keep.df, df)
#####EUKARYOTES ARCTIC##########
#get bray dissimilarities matrix and melt
sub = subset_samples(euk, Subcommunity == "Abundant" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Eukaryote"
df$pole = "Arctic"
df$Subcommunity = "Abundant"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(euk, Subcommunity == "Intermediate" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Eukaryote"
df$pole = "Arctic"
df$Subcommunity = "Intermediate"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(euk, Subcommunity == "Rare" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Eukaryote"
df$pole = "Arctic"
df$Subcommunity = "Rare"
keep.df = rbind(keep.df, df)
#####EUKARYOTES ANTARCTIC##########
#get bray dissimilarities matrix and melt
sub = subset_samples(euk, Subcommunity == "Abundant" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Eukaryote"
df$pole = "Antarctic"
df$Subcommunity = "Abundant"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(euk, Subcommunity == "Intermediate" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Eukaryote"
df$pole = "Antarctic"
df$Subcommunity = "Intermediate"
keep.df = rbind(keep.df, df)
#get bray dissimilarities matrix and melt
sub = subset_samples(euk, Subcommunity == "Rare" & Pole == "Arctic")
rel = transform_sample_counts(sub, function(x) x/sum(x))
dis <- phyloseq::distance(sub, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
df$group = "Eukaryote"
df$pole = "Antarctic"
df$Subcommunity = "Rare"
keep.df = rbind(keep.df, df)
keep.df$group = factor(keep.df$group, levels = c("Prokaryote", "Eukaryote"))
keep.df$pole = factor(keep.df$pole, levels = c("Antarctic", "Arctic"))
#Combine plots
plot.a = ggarrange(p.nmds.1 + annotate("text",x=-Inf,y=-Inf,hjust=-7.5,vjust=-0.5, size=100,label=paste0("Stress:", round(ordBR$stress, 2))),
p.nmds.2 + annotate("text",x=-Inf,y=-Inf,hjust=-7.5,vjust=-0.5, size=100,label=paste0("Stress:", round(ordBR$stress, 2))),
ncol=2, nrow=1, common.legend = TRUE, legend="bottom",
font.label=list(size=20))
print(plot.a)
keep.df$Subcommunity = factor(keep.df$Subcommunity, levels = c("Rare", "Intermediate", "Abundant"))
#beta diversity boxplot
plot.b = ggplot(keep.df, aes(x=Subcommunity, y=Beta, fill = Subcommunity), alpha=0.8) +
geom_boxplot()+
#facet_grid(pole ~ group, margins=TRUE)
facet_wrap(~ group + pole, nrow = 1, scales = "free_x")+
ylab("Bray-Curtis Dissimilarities")+
scale_fill_manual(values=c("#82ca81", "#74a9d8", "#ef7a76"))+
theme_bw()+
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title = element_blank(),
legend.position = "none",
strip.text.x = element_text(size = 20))
print(plot.b)
# plot.c = plot.a / plot.b + plot_annotation(tag_levels = "A") &
# theme(plot.tag = element_text(size = 25))
# print(plot.c)
plot.c = plot_grid(plot.a, plot.b, nrow=2, labels="AUTO", label_size = 20)
print(plot.c)
pdf("../results/bray-NMDS-and-beta-diversity-boxplot.pdf", height=8, width=10)
print(plot.c)
dev.off()
###################################################################################################
###################################################################################################
rm(list=ls())
graphics.off()
library(phyloseq)
library(vegan) #wascores
library(ggplot2)
library(picante)
library(ecodist) #for distance() function
library(parallel)
library(svglite)
library(dplyr) #for %>%
library(scales) #for percentages
# Step 2: Read in data
pro <- readRDS("../results/16S-phylo-object-rarefied-var-trans.rds")
euk <- readRDS("../results/18S-phylo-object-rarefied-var-trans.rds")
pro.ant <- subset_samples(pro, Pole=="Antarctic")
pro.ant = filter_taxa(pro.ant, function(x) sum(x) > 0, TRUE)
euk.ant <- subset_samples(euk, Pole=="Antarctic")
euk.ant = filter_taxa(euk.ant, function(x) sum(x) > 0, TRUE)
pro.ant.abun <- readRDS("../results/16S-phylo-object-ant-abun-var-trans.rds")
pro.ant.int <- readRDS("../results/16S-phylo-object-ant-int-var-trans.rds")
pro.ant.rare <- readRDS("../results/16S-phylo-object-ant-rare-var-trans.rds")
euk.ant.abun <- readRDS("../results/18S-phylo-object-ant-abun-var-trans.rds")
euk.ant.int <- readRDS("../results/18S-phylo-object-ant-int-var-trans.rds")
euk.ant.int <- prune_samples(sample_sums(euk.ant.int)>0, euk.ant.int)
euk.ant.rare <- readRDS("../results/18S-phylo-object-ant-rare-var-trans.rds")
mantel_correlogram_func <- function(phylo){
#PROPORTIONAL TRANSFORMATION
ps.rel <- transform_sample_counts(phylo, function(x) x/sum(x))
#Get metadata of samples
samp_data <- data.frame(sample_data(ps.rel))
#list of variables we're interested in
keeps1 <- c("WaterDepth", "SedimentDepth", "TotalDepth", "pH", "DOC", "Cl", "SO4", "Mg","Ca", "Area")
keeps2 <-c("DistanceToSea", "Elevation", "HCO3")
samp_data1 <- samp_data[ , (names(samp_data) %in% keeps1)]
samp_data2 <- samp_data[ , (names(samp_data) %in% keeps2)]
#remove columns with more than 50% missing variables
samp_data_trim1 <- samp_data1[ lapply( samp_data1, function(x) sum(is.na(x)) / length(x) ) < 0.5 ]
samp_data_trim2 <- samp_data2[ lapply( samp_data2, function(x) sum(is.na(x)) / length(x) ) < 0.7 ]
#Only keep complete cases
meta1 <- samp_data_trim1[complete.cases(samp_data_trim1),]
meta2 <- samp_data_trim2[complete.cases(samp_data_trim2),]
#MANTEL CORRELOGRAM ONE
ps.smol1 = prune_samples(rownames(meta1), ps.rel)
# sample_df1 <- data.frame(sample_data(trim1))
meta.trim1 <- meta1
#remove ASVs with 0 relative abundance
trim.filter1 <- filter_taxa(ps.smol1, function(x) sum(x) > 0, TRUE)
#Get phylogenetic distances
tree1 <- phy_tree(trim.filter1) #pull out phylogenetic tree
tree.dist1 <- cophenetic(tree1)
asvs1 <- tree1$tip.label
phylo.dists1 <- tree.dist1[asvs1, asvs1]
phylo.dists1[upper.tri(phylo.dists1, diag=TRUE)] = NA
#Calculate the weighted mean environmental parameter for each asv as a proxy for niche preferences
#turn the dataframe into a matrix
niches1 <- as.matrix(meta.trim1)
asv.table1 <- data.frame(t(otu_table(trim.filter1)), check.names = FALSE)
asv.niche1 <- wascores(niches1, asv.table1) #this will find the weighted mean environmental parameter for each asv
asv.niche.df1 <- data.frame(asv.niche1, check.names = FALSE)
#generate euclidean distance matrix for each ASV using combined environmental parameters
dist.out1 = as.matrix(dist(asv.niche.df1), labels=TRUE)
#calculate mantel correlogram
corlg1 <- mantel.correlog(dist.out1, phylo.dists1, r.type="spearman")
#MANTEL CORRELOGRAM TWO
ps.smol2 = prune_samples(rownames(meta2), ps.rel)
# sample_df1 <- data.frame(sample_data(trim1))
meta.trim2 <- meta2
#remove ASVs with 0 relative abundance
trim.filter2 <- filter_taxa(ps.smol2, function(x) sum(x) > 0, TRUE)
#Get phylogenetic distances
tree2 <- phy_tree(trim.filter2) #pull out phylogenetic tree
tree.dist2 <- cophenetic(tree2)
asvs2 <- tree2$tip.label
phylo.dists2 <- tree.dist2[asvs2, asvs2]
phylo.dists2[upper.tri(phylo.dists2, diag=TRUE)] = NA
#Calculate the weighted mean environmental parameter for each asv as a proxy for niche preferences
#turn the dataframe into a matrix
niches2 <- as.matrix(meta.trim2)
asv.table2 <- data.frame(t(otu_table(trim.filter2)), check.names = FALSE)
asv.niche2 <- wascores(niches2, asv.table2) #this will find the weighted mean environmental parameter for each asv
asv.niche.df2 <- data.frame(asv.niche2, check.names = FALSE)
#generate euclidean distance matrix for each ASV using combined environmental parameters
dist.out2 = as.matrix(dist(asv.niche.df2), labels=TRUE)
#calculate mantel correlogram
corlg2 <- mantel.correlog(dist.out2, phylo.dists2, r.type="spearman")
# Prep data
crlg1 <- data.frame(corlg1$mantel.res)
crlg2 <- data.frame(corlg2$mantel.res)
crlg1 <- crlg1 %>%
mutate(sig = ifelse(Pr.corrected. <= 0.05, "significant", "non-significant")) %>%
filter(!(is.na(Pr.corrected.)))
crlg2 <- crlg2 %>%
mutate(sig = ifelse(Pr.corrected. <= 0.05, "significant", "non-significant")) %>%
filter(!(is.na(Pr.corrected.)))
crlg1$D.cl = rownames(crlg1)
crlg1$Analysis = "1"
crlg2$D.cl = rownames(crlg2)
crlg2$Analysis = "2"
final.crlg = rbind(crlg1, crlg2)
return(final.crlg)
}
#Read in the correlogran results from the HPC
plot.df = read.csv("../results/mantel-correlogram-results.csv")
View(plot.df)
#order our groups
df2plot = plot.df[plot.df$Subcommunity != "Full",]
df2plot$Group = factor(df2plot$Group, levels=c("Prokaryote", "Eukaryote"))
df2plot$Subcommunity = factor(df2plot$Subcommunity, levels = c("Rare", "Intermediate", "Abundant"))
p = ggplot(data=df2plot, aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis)) +
geom_point(data=df2plot[df2plot$sig=="significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black", size=3, shape=16)+
geom_point(data=df2plot[df2plot$sig=="non-significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black",size=3, shape=1)+
geom_line(size=1)+
geom_hline(yintercept = 0, linetype=2)+
labs(x = "Phylogenetic distance class", y="Mantel correlation")+
# ylim(-0.15, 0.1)+
theme_bw()+
theme(axis.text = element_text(size=7),
axis.text.x = element_text(angle=45, hjust=1),
axis.title = element_text(size=10),
legend.position = "bottom",
legend.text = element_text(size=10))+
facet_grid(rows=vars(Group), cols=vars(Subcommunity), scales = "free_x")
print(p)
plot.df$Analysis = as.factor(plot.df$Analysis)
#order our groups
df2plot = plot.df[plot.df$Subcommunity != "Full",]
df2plot$Group = factor(df2plot$Group, levels=c("Prokaryote", "Eukaryote"))
df2plot$Subcommunity = factor(df2plot$Subcommunity, levels = c("Rare", "Intermediate", "Abundant"))
p = ggplot(data=df2plot, aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis)) +
geom_point(data=df2plot[df2plot$sig=="significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black", size=3, shape=16)+
geom_point(data=df2plot[df2plot$sig=="non-significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black",size=3, shape=1)+
geom_line(size=1)+
geom_hline(yintercept = 0, linetype=2)+
labs(x = "Phylogenetic distance class", y="Mantel correlation")+
# ylim(-0.15, 0.1)+
theme_bw()+
theme(axis.text = element_text(size=7),
axis.text.x = element_text(angle=45, hjust=1),
axis.title = element_text(size=10),
legend.position = "bottom",
legend.text = element_text(size=10))+
facet_grid(rows=vars(Group), cols=vars(Subcommunity), scales = "free_x")
print(p)
pdf("../results/mantel-correlogram.pdf", width=10, height=5)
print(p)
dev.off()
#full community only
df2plot = plot.df[plot.df$Subcommunity == "Full",]
df2plot$Group = factor(df2plot$Group, levels=c("Prokaryote", "Eukaryote"))
df2plot$Subcommunity = factor(df2plot$Subcommunity, levels = c("Rare", "Intermediate", "Abundant"))
p2 = ggplot(data=df2plot, aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis)) +
geom_point(data=df2plot[df2plot$sig=="significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black", size=3, shape=16)+
geom_point(data=df2plot[df2plot$sig=="non-significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black",size=3, shape=1)+
geom_line(size=1)+
geom_hline(yintercept = 0, linetype=2)+
labs(x = "Phylogenetic distance class", y="Mantel correlation")+
# ylim(-0.15, 0.1)+
theme_bw()+
theme(axis.text = element_text(size=7),
axis.text.x = element_text(angle=45, hjust=1),
axis.title = element_text(size=10),
legend.position = "bottom",
legend.text = element_text(size=10))+
facet_grid(rows=vars(Group), cols=vars(Subcommunity), scales = "free_x")
print(p2)
df2plot = plot.df[plot.df$Subcommunity == "Full",]
df2plot$Group = factor(df2plot$Group, levels=c("Prokaryote", "Eukaryote"))
df2plot$Subcommunity = factor(df2plot$Subcommunity, levels = c("Full"))
p2 = ggplot(data=df2plot, aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis)) +
geom_point(data=df2plot[df2plot$sig=="significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black", size=3, shape=16)+
geom_point(data=df2plot[df2plot$sig=="non-significant",], aes(x=class.index, y=Mantel.cor, group=Analysis, color=Analysis), color = "black",size=3, shape=1)+
geom_line(size=1)+
geom_hline(yintercept = 0, linetype=2)+
labs(x = "Phylogenetic distance class", y="Mantel correlation")+
# ylim(-0.15, 0.1)+
theme_bw()+
theme(axis.text = element_text(size=7),
axis.text.x = element_text(angle=45, hjust=1),
axis.title = element_text(size=10),
legend.position = "bottom",
legend.text = element_text(size=10))+
facet_grid(rows=vars(Group), cols=vars(Subcommunity), scales = "free_x")
print(p2)
pdf("../results/mantel-correlogram-full.pdf", width=10, height=5)
print(p2)
dev.off()
