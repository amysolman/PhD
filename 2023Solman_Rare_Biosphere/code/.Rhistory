# 1 Define function for calculating null values
# Function for calculating the distances in the null communities
RCbray_null_func <- function(i, freq.abd.df, alpha1, alpha2, N){
# Get simulated communities and distance
## initally select OTUs weighted by their frequency. The number of OTUs selected should equal the richness of the samples.
simcom1 = data.frame(table(sample(freq.abd.df$OTU, size=alpha1, replace=F, prob=freq.abd.df$freq)), stringsAsFactors = F)
colnames(simcom1) = c("OTU","simcom1")
simcom1$OTU = as.character(simcom1$OTU)
simcom1 = inner_join(simcom1, freq.abd.df, by="OTU")
simcom2 = data.frame(table(sample(freq.abd.df$OTU, size=alpha2, replace=F, prob=freq.abd.df$freq)), stringsAsFactors = F)
colnames(simcom2) = c("OTU","simcom2")
simcom2$OTU = as.character(simcom2$OTU)
simcom2 = inner_join(simcom2, freq.abd.df, by="OTU")
## Now recruit OTUs based on their abundance in the metacommunity
simcom1.abd = data.frame(table(sample(simcom1$OTU, size=N-alpha1, replace=T, prob=simcom1$p)), stringsAsFactors = F)
colnames(simcom1.abd) = c("OTU","simcom1.abd")
simcom1.abd$OTU = as.character(simcom1.abd$OTU)
simcom1 = full_join(simcom1, simcom1.abd, by="OTU") %>%
mutate(simcom1.abd = ifelse(is.na(simcom1.abd), 1, simcom1.abd)) %>%
select(OTU, simcom1.abd)
simcom2.abd = data.frame(table(sample(simcom2$OTU, size=N-alpha2, replace=T, prob=simcom2$p)), stringsAsFactors = F)
colnames(simcom2.abd) = c("OTU","simcom2.abd")
simcom2.abd$OTU = as.character(simcom2.abd$OTU)
simcom2 = full_join(simcom2, simcom2.abd, by="OTU") %>%
mutate(simcom2.abd = ifelse(is.na(simcom2.abd), 1, simcom2.abd)) %>%
select(OTU, simcom2.abd)
simcom = full_join(simcom1, simcom2, by="OTU")
simcom[is.na(simcom)] = 0
rownames(simcom) = simcom$OTU
simcom$OTU = NULL
#relative abundance communities
simcom.rel = simcom
simcom.rel$simcom1.abd = simcom$simcom1.abd/sum(simcom$simcom1.abd)
simcom.rel$simcom2.abd = simcom$simcom2.abd/sum(simcom$simcom2.abd)
null.dist.rel = vegdist(t(simcom.rel), method="bray")[1]
return(null.dist.rel)
}
#2 Define main function for calculating RC Bray
# Main function for calculating RCbray
Calc_RCbray <- function(physeq, reps, nproc){
# Get OTU table from phyloseq object
otu.table = otu_table(physeq)
# Get alpha diversity for each sample
otu.PA.table = otu.table
otu.PA.table[otu.PA.table > 0] = 1
alpha.df = data.frame(Sample_ID = colnames(otu.PA.table), OTU.n = colSums(otu.PA.table), stringsAsFactors = F)
#transform data for Bray-Curtis calculation
physeq.rel = transform_sample_counts(physeq, function(x) x/sum(x))
#get community data table
rel.tab = data.frame(t(otu_table(physeq.rel)))
# Get beta diversity matrix
beta.table = as.matrix(vegdist(rel.tab), method="bray", diag=TRUE, upper=TRUE)
## Get metacommunity
# Calculate the number of individuals in the meta community (Average read depth)
N <- mean(apply(t(otu.table), 1, sum))
# Calculate the average relative abundance of each taxa across communities
p.m <- apply(t(otu.table), 2, mean)
p.m <- p.m[p.m != 0]
p <- p.m/N
# Calculate the occurrence frequency of each taxa across communities
otu.table.bi <- 1*(t(otu.table)>0)
freq <- apply(otu.table.bi, 2, mean)
freq <- freq[freq != 0]
# Combine
freq.abd.df = data.frame(p=p, freq=freq) %>%
tibble::rownames_to_column(var="OTU") %>%
filter(p != 0, freq != 0) %>%
arrange(p)
# For each pair of samples run the RCbray analysis
comps = combn(alpha.df$Sample_ID, m=2, simplify = F)
RCb.df = data.frame(Site1 = character(), Site2 = character(), RCb = numeric(), stringsAsFactors = F)
for (j in seq(1, length(comps))){
sam = comps[[j]]
alpha1 = alpha.df[alpha.df$Sample_ID == sam[1],]$OTU.n
alpha2 = alpha.df[alpha.df$Sample_ID == sam[2],]$OTU.n
# Permute "reps" many times
rep.list = seq(1, reps)
null.list = mclapply(rep.list, RCbray_null_func, freq.abd.df=freq.abd.df, alpha1=alpha1, alpha2=alpha2, N=N, mc.cores=nproc)
RCb = (length(null.list[null.list > beta.table[sam[1], sam[2]]]) + (0.5*length(null.list[null.list == beta.table[sam[1], sam[2]]])))/reps
RCb = (RCb - 0.5)*2
RCb.df = rbind(RCb.df, data.frame(Site1=sam[1], Site2=sam[2], RCb=RCb, stringsAsFactors = F))
}
RCb.df
return(RCb.df)
}
##RUN THE MODEL
get_bnti_res <- function(phylo, subcom, group, pole){
df = Phylo_turnover(transform_sample_counts(phylo, function(x) x/sum(x)), 10, 1) #should be 1000 10
df$Group = group
df$Subcommunity = subcom
df$Pole = pole
return(df)
}
pro.ant.bNTI.df = get_bnti_res(pro.ant, "Full", "Prokaryote", "Antarctic")
pro.ant.abun.bNTI.df = get_bnti_res(pro.ant.abun, "Abundant", "Prokaryote", "Antarctic")
pro.ant.int.bNTI.df = get_bnti_res(pro.ant.int, "Intermediate", "Prokaryote", "Antarctic")
pro.ant.rare.bNTI.df = get_bnti_res(pro.ant.rare, "Rare", "Prokaryote", "Antarctic")
pro.arc.bNTI.df = get_bnti_res(pro.arc, "Full", "Prokaryote", "Arctic")
pro.arc.abun.bNTI.df = get_bnti_res(pro.arc.abun, "Abundant", "Prokaryote", "Arctic")
pro.arc.int.bNTI.df = get_bnti_res(pro.arc.int, "Intermediate", "Prokaryote", "Arctic")
pro.arc.rare.bNTI.df = get_bnti_res(pro.arc.rare, "Rare", "Prokaryote", "Arctic")
euk.ant.bNTI.df = get_bnti_res(euk.ant, "Full", "Eukaryote", "Antarctic")
euk.ant.abun.bNTI.df = get_bnti_res(euk.ant.abun, "Abundant", "Eukaryote", "Antarctic")
euk.ant.int.bNTI.df = get_bnti_res(euk.ant.int, "Intermediate", "Eukaryote", "Antarctic")
euk.ant.rare.bNTI.df = get_bnti_res(euk.ant.rare, "Rare", "Eukaryote", "Antarctic")
euk.arc.bNTI.df = get_bnti_res(euk.arc, "Full", "Eukaryote", "Arctic")
euk.arc.abun.bNTI.df = get_bnti_res(euk.arc.abun, "Abundant", "Eukaryote", "Arctic")
euk.arc.int.bNTI.df = get_bnti_res(euk.arc.int, "Intermediate", "Eukaryote", "Arctic")
euk.arc.rare.bNTI.df = get_bnti_res(euk.arc.rare, "Rare", "Eukaryote", "Arctic")
full.bNTI.df = rbind(pro.ant.bNTI.df, pro.ant.abun.bNTI.df, pro.ant.int.bNTI.df, pro.ant.rare.bNTI.df,
pro.arc.bNTI.df, pro.arc.abun.bNTI.df, pro.arc.int.bNTI.df, pro.arc.rare.bNTI.df,
euk.ant.bNTI.df, euk.ant.abun.bNTI.df, euk.ant.int.bNTI.df, euk.ant.rare.bNTI.df,
euk.arc.bNTI.df,euk.arc.abun.bNTI.df, euk.arc.int.bNTI.df, euk.arc.rare.bNTI.df)
write.csv(full.bNTI.df, "../results/bNTI-results-table.csv")
get_rcbray_res <- function(phylo, subcom, group, pole){
df = Calc_RCbray(phylo, 1, 1) #should be 999 20
df$Group = group
df$Subcommunity = subcom
df$Pole = pole
return(df)
}
pro.ant.rcbray.df = get_rcbray_res(pro.ant, "Full", "Prokaryote", "Antarctic")
get_rcbray_res <- function(phylo, subcom, group, pole){
df = Calc_RCbray(phylo, 2, 1) #should be 999 20
df$Group = group
df$Subcommunity = subcom
df$Pole = pole
return(df)
}
pro.ant.rcbray.df = get_rcbray_res(pro.ant, "Full", "Prokaryote", "Antarctic")
get_rcbray_res <- function(phylo, subcom, group, pole){
df = Calc_RCbray(phylo, 2, 2) #should be 999 20
df$Group = group
df$Subcommunity = subcom
df$Pole = pole
return(df)
}
pro.ant.rcbray.df = get_rcbray_res(pro.ant, "Full", "Prokaryote", "Antarctic")
pro.ant.abun.rcbray.df = get_rcbray_res(pro.ant.abun, "Abundant", "Prokaryote", "Antarctic")
pro.ant.int.rcbray.df = get_rcbray_res(pro.ant.int, "Intermediate", "Prokaryote", "Antarctic")
pro.ant.rare.rcbray.df = get_rcbray_res(pro.ant.rare, "Rare", "Prokaryote", "Antarctic")
pro.arc.rcbray.df = get_rcbray_res(pro.arc, "Full", "Prokaryote", "Arctic")
pro.arc.abun.rcbray.df = get_rcbray_res(pro.arc.abun, "Abundant", "Prokaryote", "Arctic")
pro.arc.int.rcbray.df = get_rcbray_res(pro.arc.int, "Intermediate", "Prokaryote", "Arctic")
pro.arc.rare.rcbray.df = get_rcbray_res(pro.arc.rare, "Rare", "Prokaryote", "Arctic")
euk.ant.rcbray.df = get_rcbray_res(euk.ant, "Full", "Eukaryote", "Antarctic")
euk.ant.abun.rcbray.df = get_rcbray_res(euk.ant.abun, "Abundant", "Eukaryote", "Antarctic")
euk.ant.int.rcbray.df = get_rcbray_res(euk.ant.int, "Intermediate", "Eukaryote", "Antarctic")
euk.ant.rare.rcbray.df = get_rcbray_res(euk.ant.rare, "Rare", "Eukaryote", "Antarctic")
euk.arc.rcbray.df = get_rcbray_res(euk.arc, "Full", "Eukaryote", "Arctic")
euk.arc.abun.rcbray.df = get_rcbray_res(euk.arc.abun, "Abundant", "Eukaryote", "Arctic")
euk.arc.int.rcbray.df = get_rcbray_res(euk.arc.int, "Intermediate", "Eukaryote", "Arctic")
euk.arc.rare.rcbray.df = get_rcbray_res(euk.arc.rare, "Rare", "Eukaryote", "Arctic")
full.rcbray.df = rbind(pro.ant.rcbray.df, pro.ant.abun.rcbray.df, pro.ant.int.rcbray.df, pro.ant.rare.rcbray.df,
pro.arc.rcbray.df, pro.arc.abun.rcbray.df, pro.arc.int.rcbray.df, pro.arc.rare.rcbray.df,
euk.ant.rcbray.df, euk.ant.abun.rcbray.df, euk.ant.int.rcbray.df, euk.ant.rare.rcbray.df,
euk.arc.rcbray.df,euk.arc.abun.rcbray.df, euk.arc.int.rcbray.df, euk.arc.rare.rcbray.df)
write.csv(full.rcbray.df, "../results/RCbray-results-table.csv")
View(full.rcbray.df)
#create dataframes
#make sure everything is formatted correctly for merging
RC_bray <- full.rcbray.df
colnames(RC_bray) <- c("Sample_2", "Sample_1", "RCb", "Group", "Subcommunity", "Pole")
RC_bray$Sample_1 <- as.integer(RC_bray$Sample_1)
RC_bray$Sample_2 <- as.integer(RC_bray$Sample_2)
full.bNTI.df$Sample_1 <- as.integer(full.bNTI.df$Sample_1)
full.bNTI.df$Sample_2 <- as.integer(full.bNTI.df$Sample_2)
turnover.df = inner_join(full.bNTI.df, RC_bray)
turnover.df = turnover.df %>%
mutate(process = ifelse(abs(bNTI) < 2, #if absolute value of BNTI is less than 2
ifelse(abs(RCb) < 0.95, "Drift", #and absolute value of RCb is less than 0.95 = Drift
ifelse(RCb >= 0.95, "Dispersal Limited", #if RCb is > 0.95 = Dispersal limited
ifelse(RCb <= -0.95, "Homogenizing Dispersal", "ERROR"))), #< -0.95 = homo disp
ifelse(bNTI >= 2, "Variable Selection", #more than 2 = variable selection
ifelse(bNTI <= -2, "Homogeneous Selection", "ERROR")))) #< -2 = homogenous selection
turnover.df$process = factor(turnover.df$process, levels = c("Drift",
"Dispersal Limited", "Homogenizing Dispersal",
"Variable Selection", "Homogeneous Selection"))
abundance.list <- unique(turnover.df$Subcommunity)
#Arctic Prokaryotes
arc_pro_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Arctic" & Group == "Prokaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
arc_pro_final_data <- rbind(arc_pro_final_data, x)
}
arc_pro_final_data$Pole = "Arctic"
arc_pro_final_data$Group = "Prokaryotes"
#Arctic Eukaryotes
arc_euk_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Arctic" & Group == "Eukaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
arc_euk_final_data <- rbind(arc_euk_final_data, x)
}
arc_euk_final_data$Pole = "Arctic"
arc_euk_final_data$Group = "Eukaryotes"
#Antarctic Prokaryotes
ant_pro_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Antarctic" & Group == "Prokaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
ant_pro_final_data <- rbind(ant_pro_final_data, x)
}
ant_pro_final_data$Pole = "Antarctic"
ant_pro_final_data$Group = "Prokaryotes"
#Antarctic tukaryotes
ant_euk_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Antarctic" & Group == "Eukaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
ant_euk_final_data <- rbind(ant_euk_final_data, x)
}
ant_euk_final_data$Pole = "Antarctic"
ant_euk_final_data$Group = "Eukaryotes"
#bind results together
final_data = rbind(arc_pro_final_data, arc_euk_final_data, ant_pro_final_data, ant_euk_final_data)
#add percentages column
final_data.edit <- final_data %>% dplyr::group_by(Subcommunity, Pole, Group) %>%
dplyr::mutate(frac = n_sites / sum(n_sites))
final_data.edit$frac = round(final_data.edit$frac,2)
#remove the full communitiy from plotting
final_data.edit.plot = subset(final_data.edit, Subcommunity != "Full")
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=2) +
facet_grid(~ Pole + Group)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=5), legend.position = "bottom", legend.title = element_blank(), axis.title.x=element_blank(), axis.text=element_text(size=5), legend.text = element_text(size=5))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
#make group a factor
final_data.edit.plot$Group = factor(final_data.edit.plot$Group, levels=c("Prokaryote", "Eukaryote"))
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=2) +
facet_grid(~ Pole + Group)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=5), legend.position = "bottom", legend.title = element_blank(), axis.title.x=element_blank(), axis.text=element_text(size=5), legend.text = element_text(size=5))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
View(final_data.edit.plot)
abundance.list <- unique(turnover.df$Subcommunity)
#Arctic Prokaryotes
arc_pro_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Arctic" & Group == "Prokaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
arc_pro_final_data <- rbind(arc_pro_final_data, x)
}
arc_pro_final_data$Pole = "Arctic"
arc_pro_final_data$Group = "Prokaryote"
#Arctic Eukaryotes
arc_euk_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Arctic" & Group == "Eukaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
arc_euk_final_data <- rbind(arc_euk_final_data, x)
}
arc_euk_final_data$Pole = "Arctic"
arc_euk_final_data$Group = "Eukaryote"
#Antarctic Prokaryotes
ant_pro_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Antarctic" & Group == "Prokaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
ant_pro_final_data <- rbind(ant_pro_final_data, x)
}
ant_pro_final_data$Pole = "Antarctic"
ant_pro_final_data$Group = "Prokaryote"
#Antarctic eukaryotes
ant_euk_final_data <- data.frame(process=character(), n_sites=integer(), perc=numeric(), Abundance=character())
new.df <- subset(turnover.df, Pole == "Antarctic" & Group == "Eukaryote")
for (i in 1:length(abundance.list)){
x <- new.df[new.df$Subcommunity == abundance.list[i], ]
x <- x %>%
group_by(process) %>%
dplyr::summarize(n_sites = n(),
perc=(n()/nrow(x))*100) %>%
as.data.frame
x$Subcommunity<- abundance.list[i]
ant_euk_final_data <- rbind(ant_euk_final_data, x)
}
ant_euk_final_data$Pole = "Antarctic"
ant_euk_final_data$Group = "Eukaryote"
#bind results together
final_data = rbind(arc_pro_final_data, arc_euk_final_data, ant_pro_final_data, ant_euk_final_data)
#add percentages column
final_data.edit <- final_data %>% dplyr::group_by(Subcommunity, Pole, Group) %>%
dplyr::mutate(frac = n_sites / sum(n_sites))
final_data.edit$frac = round(final_data.edit$frac,2)
#PLOT RESULTS
#final_data$round_perc <- round(final_data$perc, 2)
#remove rows with less than 1%
#x.cut <- x[which(x$frac > 0.01),]
#remove the full communitiy from plotting
final_data.edit.plot = subset(final_data.edit, Subcommunity != "Full")
#make group a factor
final_data.edit.plot$Group = factor(final_data.edit.plot$Group, levels=c("Prokaryote", "Eukaryote"))
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=2) +
facet_grid(~ Pole + Group)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=5), legend.position = "bottom", legend.title = element_blank(), axis.title.x=element_blank(), axis.text=element_text(size=5), legend.text = element_text(size=5))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=2) +
facet_grid(~ Group + Pole)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=5), legend.position = "bottom", legend.title = element_blank(), axis.title.x=element_blank(), axis.text=element_text(size=5), legend.text = element_text(size=5))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
sample_sums(euk.ant.int)
taxa_sums(euk.ant.int)
min(taxa_sums(euk.ant.int))
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=5) +
facet_grid(~ Group + Pole)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=10), legend.position = "bottom", legend.title = element_blank(), axis.title.x=element_blank(), axis.text=element_text(size=5), legend.text = element_text(size=5))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
pdf("../results/null-model.pdf")
print(p1)
dev.off()
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=5) +
facet_grid(~ Group + Pole)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=10),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.x=element_blank(), axis.text=element_text(size=10),
legend.text = element_text(size=10))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
pdf("../results/null-model.pdf", width=5, height=8)
print(p1)
dev.off()
pdf("../results/null-model.pdf", width=8, height=8)
print(p1)
dev.off()
pdf("../results/null-model.pdf", width=10, height=8)
print(p1)
dev.off()
pdf("../results/null-model.pdf", width=12, height=8)
print(p1)
dev.off()
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=5) +
facet_grid(~ Group + Pole)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=12),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.x=element_blank(),
axis.text=element_text(size=12),
legend.text = element_text(size=12))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
pdf("../results/null-model.pdf", width=12, height=8)
print(p1)
dev.off()
pdf("../results/null-model.pdf", width=14, height=8)
print(p1)
dev.off()
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=5) +
facet_grid(~ Group + Pole)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=12),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.x=element_blank(),
axis.text=element_text(size=12),
legend.text = element_text(size=15))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
pdf("../results/null-model.pdf", width=14, height=8)
print(p1)
dev.off()
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=5) +
facet_grid(~ Group + Pole)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=12),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.x=element_blank(),
axis.text=element_text(size=15),
legend.text = element_text(size=15))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
pdf("../results/null-model.pdf", width=14, height=8)
print(p1)
dev.off()
p1 = ggplot(final_data.edit.plot, aes(x = Subcommunity,y = n_sites,
fill = factor(process, levels=c("Homogeneous Selection", "Variable Selection", "Homogenizing Dispersal", "Dispersal Limited", "Drift")))) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels=scales::percent)+
geom_text(
aes(label = percent(frac)), position = position_fill(0.5), size=5) +
facet_grid(~ Group + Pole)+
theme_bw()+
ylab("Relative Contribution %")+
theme(text=element_text(size=12),
legend.position = "bottom",
legend.title = element_blank(),
axis.title.x=element_blank(),
axis.text=element_text(size=12),
legend.text = element_text(size=15))+
guides(fill=guide_legend(nrow=2,byrow=TRUE))+
scale_fill_manual(values=c("#f8c4be", "#f18579", "#88d2d6", "#6ca8ab", "#517e80"))
print(p1)
pdf("../results/null-model.pdf", width=14, height=8)
print(p1)
dev.off()
