6101700/354156700
561960200/1327253700
448686080000/542752000000
3.911346e+05/2.494061e+07
3.911346e+05*10
3.911346e+05*20
(1.500848e+06+3.911346e+05)/2
((1.500848e+06+3.911346e+05)/2)*16
((1.500848e+06+3.911346e+05)/2)*18
((1.500848e+06+3.911346e+05)/2)*20
((1.500848e+06+3.911346e+05)/2)*21
((1.500848e+06+3.911346e+05)/2)*22
((1.500848e+06+3.911346e+05)/2)*24
((1.500848e+06+3.911346e+05)/2)*25
((1.500848e+06+3.911346e+05)/2)*26
((1.500848e+06+3.911346e+05)/2)*27
((1.500848e+06+3.911346e+05)/2)*26
View(data1)
library(countdata)
library(countdata)
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results-V2.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$Final.DNA.Con..ng.uL.))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
#5. Gene copies in total elute: Multiply gene copies per uL by the total volume of DNA extraction elute = 100uL
my_data2$GenesPerElute = my_data2$GenesPeruLCorrected * 100
#6. Gene copies per mg: Divide gene copies in total elute by the original sample weight
my_data2$GenesPerMg = my_data2$GenesPerElute / my_data2$E.coli.Weight..mg.
my_stats = group_by(my_data2, Analysis, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
my_stats = group_by(my_data2, Analysis, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats$CV = my_stats$sd / my_stats$mean
#8. Plot the data
#log transform the data
my_data2$log10GenesPerMg = log10(my_data2$GenesPerMg)
#plot
p <- ggplot(my_data2, aes(x=Treatment, y=log10GenesPerMg)) +
geom_boxplot()+
facet_wrap( ~ Analysis + Group)+
theme_bw()
p
#save plot
pdf("../results/PMA-qPCR-test.pdf", height=10, width=5)
print(p)
dev.off()
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
View(data)
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
#1. Clear workspace, load packages and data
rm(list=ls())
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$FinalDNAConcentration)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$FinalDNAConcentration))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$FinalDNAConcentration)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$FinalDNAConcentration))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
View(my_data2)
View(data)
#1. Clear workspace, load packages and data
rm(list=ls())
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$FinalDNAConcentration)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$FinalDNAConcentration))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
#5. Gene copies in total elute: Multiply gene copies per uL by the total volume of DNA extraction elute = 100uL
my_data2$GenesPerElute = my_data2$GenesPeruLCorrected * 100
#6. Gene copies per mg: Divide gene copies in total elute by the original sample weight
my_data2$GenesPerMg = my_data2$GenesPerElute / my_data2$E.coli.Weight..mg.
View(my_data2)
#summary stats
my_stats = group_by(my_data2, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats$CV = my_stats$sd / my_stats$mean
#export data
write.csv(my_stats, "../results/PMA-qPCR-test-res.csv")
#create a combined group and treatment categorical variable
my_data2$CombiGroups = paste(my_data2$Group, my_data2$Treatment)
p <- ggplot(my_data2, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")#+
#stat_compare_means(comparisons = my_comparisons, size=5)
p
#add log10 transformed genes
my_data2$log10GenesPerMg = log10(my_data2$GenesPerMg)
p <- ggplot(my_data2, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p
#create a combined group and treatment categorical variable
my_data2$CombiGroups = paste(my_data2$Group, my_data2$Treatment)
#put them in the correct order for plotting
my_data2$CombiGroups <- factor(my_data2$CombiGroups , levels=c("Live tDNA", "Live iDNA", "Killed tDNA", "Killed iDNA"))
#add log10 transformed genes
my_data2$log10GenesPerMg = log10(my_data2$GenesPerMg)
p <- ggplot(my_data2, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p
#save the plot
pdf("../results/PMA-qPCR-results.pdf", height=3, width=4)
print(p)
dev.off()
#Summary stats after removing anomolous result
my_data3 = my_data2[my_data2$Sample != "KP2",]
#summary stats
my_stats2 = group_by(my_data3, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#Summary stats after removing anomolous result
my_data3 = my_data2[my_data2$Sample != "KP2",]
#summary stats
my_stats2 = group_by(my_data3, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats2$CV = my_stats2$sd / my_stats2$mean
#export data
write.csv(my_stats2, "../results/PMA-qPCR-test-res-no-anom.csv")
View(my_data3)
p2 <- ggplot(my_data3, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p2
#save the plot
pdf("../results/PMA-qPCR-results-no-anom.pdf", height=3, width=4)
print(p2)
dev.off()
View(my_data2)
View(my_stats2)
#PARAMETRIC TESTS
#Compute the analysis of variance to see if there are significant differences between the groups
res.aov1 <- aov(GenesPerMg ~ CombiGroups, data = my_data3)
#but is our data normally distibuted?
# 1. Homogeneity of variances
plot(res.aov1, 1)
# 2. Normality
plot(res.aov1, 2)
# Extract the residuals
aov_residuals1 <- residuals(object = res.aov1)
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals1)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "bonferroni", altp=TRUE)
?dunn.test
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "sidak", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "holm", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "hs", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "hochberg", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#kruskal-Wallis test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
res.kru1 <- kruskal.test(GenesPerMg ~ Treatment, data = test1)
res.kru1
#kruskal-Wallis test between killed idna and tdna
test2 = my_data3[my_data3$Group == "Killed",]
res.kru2 <- kruskal.test(GenesPerMg ~ Treatment, data = test2)
res.kru2
#kruskal-Wallis test between live idna and killed idna
test3 = my_data3[my_data3$Treatment == "iDNA",]
res.kru3 <- kruskal.test(GenesPerMg ~ Group, data = test3)
res.kru3
res1 <- wilcoxon.test(GenesPerMg ~ Treatment, data = test1)
#or we can just perform multiple kruskal-wallis tests
#kruskal-Wallis test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
res1 <- wilcox.test(GenesPerMg ~ Treatment, data = test1)
res1
#or we can just perform multiple kruskal-wallis tests
#kruskal-Wallis test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
#or we can just perform multiple kruskal-wallis tests
#wilcoxon test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
res1 <- wilcox.test(GenesPerMg ~ Treatment, data = test1)
res1
test1 = my_data3[my_data3$Group == "Live",]
res1 <- wilcox.test(GenesPerMg ~ Treatment, data = test1)
res1
#wilcoxon test for difference between two gorups - killed idna and tdna
test2 = my_data3[my_data3$Group == "Killed",]
res2 <- wilcox.test(GenesPerMg ~ Treatment, data = test2)
res2
#wilcoxon test for difference between two gorups - live idna and killed idna
test3 = my_data3[my_data3$Treatment == "iDNA",]
res3 <- wilcox.test(GenesPerMg ~ Group, data = test3)
res3
?wilcox.test
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#2. Total genes in reaction: Multiply mean gene copies per uL by the number of uL added to the reaction (=4uL)
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$FinalDNAConcentration)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$FinalDNAConcentration))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
#5. Gene copies in total elute: Multiply gene copies per uL by the total volume of DNA extraction elute = 100uL
my_data2$GenesPerElute = my_data2$GenesPeruLCorrected * 100
#6. Gene copies per mg: Divide gene copies in total elute by the original sample weight
my_data2$GenesPerMg = my_data2$GenesPerElute / my_data2$E.coli.Weight..mg.
#7. Calculate basic stats
#when calculating my stats I see that the standard deviations (measure of variation around the mean) is very high for my
#dataset. So I calculated the coefficient of variation by dividing SD by mean. CV ≥ 1 indicates a relatively high variation.
#CV = the ratio between SD and Mean in the dataset. Essentially we see here that our data is spread over a wide range of values,
#but the variance isn't "high" as most groups have CV < 1.
#summary stats
my_stats = group_by(my_data2, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats$CV = my_stats$sd / my_stats$mean
#export data
write.csv(my_stats, "../results/PMA-qPCR-test-res.csv")
#8. Plot the data
#create a combined group and treatment categorical variable
my_data2$CombiGroups = paste(my_data2$Group, my_data2$Treatment)
#put them in the correct order for plotting
my_data2$CombiGroups <- factor(my_data2$CombiGroups , levels=c("Live tDNA", "Live iDNA", "Killed tDNA", "Killed iDNA"))
#add log10 transformed genes
my_data2$log10GenesPerMg = log10(my_data2$GenesPerMg)
p <- ggplot(my_data2, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p
#save the plot
pdf("../results/PMA-qPCR-results.pdf", height=3, width=4)
print(p)
dev.off()
#we can see from the high CV value and from the plot that we have an anomolous result with sample KP2.
#Let's remove this and try again
#Summary stats after removing anomolous result
my_data3 = my_data2[my_data2$Sample != "KP2",]
#summary stats
my_stats2 = group_by(my_data3, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats2$CV = my_stats2$sd / my_stats2$mean
#export data
write.csv(my_stats2, "../results/PMA-qPCR-test-res-no-anom.csv")
#8. Plot the data
p2 <- ggplot(my_data3, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p2
#save the plot
pdf("../results/PMA-qPCR-results-no-anom.pdf", height=3, width=4)
print(p2)
dev.off()
#9. Test for significant differences
#are there differences in the genes per mg between Live iDNA, Live tDNA, Killed iDNA and Killed tDNA?
#Which groups are significantly different?
# Null hypothesis: the means of the different groups are the same
# Alternative hypothesis: At least one sample mean is not equal to the others
#PARAMETRIC TESTS
#Compute the analysis of variance to see if there are significant differences between the groups
res.aov1 <- aov(GenesPerMg ~ CombiGroups, data = my_data3)
#but is our data normally distibuted?
# 1. Homogeneity of variances
plot(res.aov1, 1)
# 2. Normality
plot(res.aov1, 2)
# Extract the residuals
aov_residuals1 <- residuals(object = res.aov1)
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals1) #p < 0.05 so data not normally distributed
#DATA NOT NORMALLY DISTRIBUTED SO USE NON-PARAMETRIC TEST
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between >2 groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#we have significant differences between live iDNA and Live tDNA
#and near signficiant differences between killed iDNA and killed tDNA
#but this is without p value corrections for multiple comparisons
p2 <- ggplot(my_data3, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 16S rRNA Genes per Mg")
p2
#save the plot
pdf("../results/PMA-qPCR-results-no-anom.pdf", height=3, width=4)
print(p2)
dev.off()
p2 <- ggplot(my_data3, aes(x=CombiGroups, y=log10GenesPerMg, fill=Treatment)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 16S rRNA Genes per Mg")
p2
p2 <- ggplot(my_data3, aes(x=CombiGroups, y=log10GenesPerMg, fill=Treatment)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank(), legend.position="bottom")+
ylab("log10 16S rRNA Genes per Mg")
p2
pdf("../results/PMA-qPCR-results-no-anom.pdf", height=3, width=4)
print(p2)
dev.off()
p2 <- ggplot(my_data3, aes(x=CombiGroups, y=log10GenesPerMg, fill=Treatment)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank(), legend.position="bottom")+
ylab("log10 16S rRNA Genes per Mg E.coli Cells")
p2
#save the plot
pdf("../results/PMA-qPCR-results-no-anom.pdf", height=3, width=4)
print(p2)
dev.off()
