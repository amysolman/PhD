p <- ggplot(data2plot, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
#save the plot
pdf("../results/PMA-qPCR-results.csv")
print(p)
dev.off()
p <- ggplot(data2plot, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
+ stat_compare_means(comparisons = my_comparisons, size=5)
p <- ggplot(data2plot, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")+
stat_compare_means(comparisons = my_comparisons, size=5)
p
p <- ggplot(data2plot, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")#+
#stat_compare_means(comparisons = my_comparisons, size=5)
p
#save the plot
pdf("../results/PMA-qPCR-results.csv")
print(p)
dev.off()
pdf("../results/PMA-qPCR-results.pdf")
print(p)
dev.off()
pdf("../results/PMA-qPCR-results.pdf", height=4, width=2)
print(p)
dev.off()
pdf("../results/PMA-qPCR-results.pdf", height=4, width=3)
print(p)
dev.off()
#save the plot
pdf("../results/PMA-qPCR-results.pdf", height=3, width=3)
print(p)
dev.off()
#save the plot
pdf("../results/PMA-qPCR-results.pdf", height=3, width=4)
print(p)
dev.off()
View(data2plot)
sum(data2plot$GenesPerMg[data2plot$CombiGroups == "Live iDNA",])
sum(data2plot[data2plot$CombiGroups == "Live iDNA",]$GenesPerMg)
sum(data2plot[data2plot$CombiGroups == "Live iDNA",]$GenesPerMg)/sum(data2plot[data2plot$CombiGroups == "Live tDNA",]$GenesPerMg)
sum(data2plot[data2plot$CombiGroups == "Killed iDNA",]$GenesPerMg)/sum(data2plot[data2plot$CombiGroups == "Killed tDNA",]$GenesPerMg)
#proportion of live cells
sum(data2plot[data2plot$CombiGroups == "Live iDNA",]$GenesPerMg)/sum(data2plot[data2plot$CombiGroups == "Live tDNA",]$GenesPerMg)*100
#proportion of dead cells
sum(data2plot[data2plot$CombiGroups == "Killed iDNA",]$GenesPerMg)/sum(data2plot[data2plot$CombiGroups == "Killed tDNA",]$GenesPerMg)*100
#differences between groups after removing anomolous result
dunn.test(data1a$GenesPerMg, data1a$CombiGroups, method = "bonferroni", altp=TRUE)
View(data1a)
#differences between groups after removing anomolous result
dunn.test(data1a$GenesPerMg, data1a$CombiGroups, method = "none", altp=TRUE)
#kruskal-Wallis test between live idna and tdna
test1 = data1a[data1a$Group == "Live",]
View(test1)
res.kru <- kruskal.test(GenesPerMg ~ Treatment, data = test1)
res.kru1 <- kruskal.test(GenesPerMg ~ Treatment, data = test1)
res.kru1
#kruskal-Wallis test between killed idna and tdna
test2 = data1a[data1a$Group == "Killed",]
res.kru2 <- kruskal.test(GenesPerMg ~ Treatment, data = test2)
res.kru2
View(test2)
#kruskal-Wallis test between live idna and killed idna
test3 = data1a[data1a$Treatment == "iDNA",]
res.kru3 <- kruskal.test(GenesPerMg ~ Group, data = test3)
res.kru3
#ANALYSIS TWO ONLY
data2 = my_data2[my_data2$Analysis ==2,]
my_stats2 = group_by(data2, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats2$CV = my_stats2$sd / my_stats2$mean
View(my_stats2)
#export data
write.csv(my_stats2, "../results/PMA-qPCR-test-res-2.csv")
#Summary stats after removing anomolous result
data2a = my_data2[my_data2$Analysis ==2 & my_data2$Sample != "KP2",]
my_stats2a = group_by(data2a, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats2a$CV = my_stats2a$sd / my_stats2a$mean
View(my_stats2a)
#export data
write.csv(my_stats2a, "../results/PMA-qPCR-test-res-2a.csv")
#differences between groups after removing anomolous result
dunn.test(data2a$GenesPerMg, data2a$CombiGroups, method = "bonferroni", altp=TRUE)
#kruskal-Wallis test between live idna and tdna
test1 = data2a[data2a$Group == "Live",]
res.kru1 <- kruskal.test(GenesPerMg ~ Treatment, data = test1)
res.kru1
#kruskal-Wallis test between killed idna and tdna
test2 = data1a[data2a$Group == "Killed",]
#kruskal-Wallis test between killed idna and tdna
test2 = data2a[data2a$Group == "Killed",]
res.kru2 <- kruskal.test(GenesPerMg ~ Treatment, data = test2)
res.kru2
#kruskal-Wallis test between live idna and killed idna
test3 = data2a[data2a$Treatment == "iDNA",]
res.kru3 <- kruskal.test(GenesPerMg ~ Group, data = test3)
res.kru3
#plot
data2plot = as.data.frame(data2a)
data2plot$CombiGroups <- factor(data2plot$CombiGroups , levels=c("Live tDNA", "Live iDNA", "Killed tDNA", "Killed iDNA"))
#Degree
my_comparisons <- list( c("Live tDNA", "Live iDNA"), c("Live tDNA", "Killed tDNA"), c("Live iDNA", "Killed iDNA"),
c("Killed tDNA", "Killed iDNA"))
p <- ggplot(data2plot, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")#+
#stat_compare_means(comparisons = my_comparisons, size=5)
p
View(data)
(121933+35939)/2
78936/1238804
78936*20
78936*15
78936*16
View(data1)
561960200+634675600
561960200+634675600/2
879298000*5
879298000*2
634675600*2
634675600*5
6101700/354156700
561960200/1327253700
448686080000/542752000000
3.911346e+05/2.494061e+07
3.911346e+05*10
3.911346e+05*20
(1.500848e+06+3.911346e+05)/2
((1.500848e+06+3.911346e+05)/2)*16
((1.500848e+06+3.911346e+05)/2)*18
((1.500848e+06+3.911346e+05)/2)*20
((1.500848e+06+3.911346e+05)/2)*21
((1.500848e+06+3.911346e+05)/2)*22
((1.500848e+06+3.911346e+05)/2)*24
((1.500848e+06+3.911346e+05)/2)*25
((1.500848e+06+3.911346e+05)/2)*26
((1.500848e+06+3.911346e+05)/2)*27
((1.500848e+06+3.911346e+05)/2)*26
View(data1)
library(countdata)
library(countdata)
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results-V2.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$Final.DNA.Con..ng.uL.))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
#5. Gene copies in total elute: Multiply gene copies per uL by the total volume of DNA extraction elute = 100uL
my_data2$GenesPerElute = my_data2$GenesPeruLCorrected * 100
#6. Gene copies per mg: Divide gene copies in total elute by the original sample weight
my_data2$GenesPerMg = my_data2$GenesPerElute / my_data2$E.coli.Weight..mg.
my_stats = group_by(my_data2, Analysis, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
my_stats = group_by(my_data2, Analysis, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats$CV = my_stats$sd / my_stats$mean
#8. Plot the data
#log transform the data
my_data2$log10GenesPerMg = log10(my_data2$GenesPerMg)
#plot
p <- ggplot(my_data2, aes(x=Treatment, y=log10GenesPerMg)) +
geom_boxplot()+
facet_wrap( ~ Analysis + Group)+
theme_bw()
p
#save plot
pdf("../results/PMA-qPCR-test.pdf", height=10, width=5)
print(p)
dev.off()
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
View(data)
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$Final.DNA.Con..ng.uL.)*4)
#1. Clear workspace, load packages and data
rm(list=ls())
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$FinalDNAConcentration)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$FinalDNAConcentration))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$FinalDNAConcentration)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$FinalDNAConcentration))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
View(my_data2)
View(data)
#1. Clear workspace, load packages and data
rm(list=ls())
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
#1. Clear workspace, load packages and data
rm(list=ls())
graphics.off()
library(tidyverse)
library(dplyr)
library(dunn.test)
library(ggpubr)
data = read.csv("../data/PMA-qPCR-test-results.csv")
#dataframe into tibble
my_data <- as_tibble(data)
#remove controls
my_data = my_data[my_data$Group != "Control",]
#only keep distinct rows with mean cell abundances
my_data2 = my_data[!duplicated(my_data$Quantity.Mean),]
#get total gene in reaction
my_data2$GenesInReaction = my_data2$Quantity.Mean*4
#3. Genes per ng DNA: Divide total genes in the reaction by the total ng DNA added to the reaction
my_data2$GenesPerNg = my_data2$GenesInReaction / (as.numeric(my_data2$FinalDNAConcentration)*4)
#4. Gene copies per uL: Multiply gene copies per ng DNA by original sample DNA concentration (remember to multiply by the X-fold dilution in necessary)
my_data2$GenesPeruL = my_data2$GenesPerNg * (as.numeric(my_data2$FinalDNAConcentration))
#multiply diluted samples by 20
my_data2 = my_data2 %>%
mutate(GenesPeruLCorrected = case_when(Diluted == TRUE ~ GenesPeruL*20,
Diluted == FALSE ~ GenesPeruL*1))
#5. Gene copies in total elute: Multiply gene copies per uL by the total volume of DNA extraction elute = 100uL
my_data2$GenesPerElute = my_data2$GenesPeruLCorrected * 100
#6. Gene copies per mg: Divide gene copies in total elute by the original sample weight
my_data2$GenesPerMg = my_data2$GenesPerElute / my_data2$E.coli.Weight..mg.
View(my_data2)
#summary stats
my_stats = group_by(my_data2, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats$CV = my_stats$sd / my_stats$mean
#export data
write.csv(my_stats, "../results/PMA-qPCR-test-res.csv")
#create a combined group and treatment categorical variable
my_data2$CombiGroups = paste(my_data2$Group, my_data2$Treatment)
p <- ggplot(my_data2, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")#+
#stat_compare_means(comparisons = my_comparisons, size=5)
p
#add log10 transformed genes
my_data2$log10GenesPerMg = log10(my_data2$GenesPerMg)
p <- ggplot(my_data2, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p
#create a combined group and treatment categorical variable
my_data2$CombiGroups = paste(my_data2$Group, my_data2$Treatment)
#put them in the correct order for plotting
my_data2$CombiGroups <- factor(my_data2$CombiGroups , levels=c("Live tDNA", "Live iDNA", "Killed tDNA", "Killed iDNA"))
#add log10 transformed genes
my_data2$log10GenesPerMg = log10(my_data2$GenesPerMg)
p <- ggplot(my_data2, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p
#save the plot
pdf("../results/PMA-qPCR-results.pdf", height=3, width=4)
print(p)
dev.off()
#Summary stats after removing anomolous result
my_data3 = my_data2[my_data2$Sample != "KP2",]
#summary stats
my_stats2 = group_by(my_data3, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#Summary stats after removing anomolous result
my_data3 = my_data2[my_data2$Sample != "KP2",]
#summary stats
my_stats2 = group_by(my_data3, Group, Treatment) %>%
summarise(
count = n(),
mean = mean(GenesPerMg, na.rm = TRUE),
median = median(GenesPerMg, na.rm = FALSE),
sd = sd(GenesPerMg, na.rm = TRUE)
)
#calculate the coefficient of variation
my_stats2$CV = my_stats2$sd / my_stats2$mean
#export data
write.csv(my_stats2, "../results/PMA-qPCR-test-res-no-anom.csv")
View(my_data3)
p2 <- ggplot(my_data3, aes(x=CombiGroups, y=log10GenesPerMg)) +
geom_boxplot()+
theme_bw()+
theme(axis.title.x = element_blank())+
ylab("log10 Genes per Mg")
p2
#save the plot
pdf("../results/PMA-qPCR-results-no-anom.pdf", height=3, width=4)
print(p2)
dev.off()
View(my_data2)
View(my_stats2)
#PARAMETRIC TESTS
#Compute the analysis of variance to see if there are significant differences between the groups
res.aov1 <- aov(GenesPerMg ~ CombiGroups, data = my_data3)
#but is our data normally distibuted?
# 1. Homogeneity of variances
plot(res.aov1, 1)
# 2. Normality
plot(res.aov1, 2)
# Extract the residuals
aov_residuals1 <- residuals(object = res.aov1)
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals1)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "bonferroni", altp=TRUE)
?dunn.test
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "sidak", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "holm", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "hs", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "hochberg", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
#kruskal-Wallis test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
res.kru1 <- kruskal.test(GenesPerMg ~ Treatment, data = test1)
res.kru1
#kruskal-Wallis test between killed idna and tdna
test2 = my_data3[my_data3$Group == "Killed",]
res.kru2 <- kruskal.test(GenesPerMg ~ Treatment, data = test2)
res.kru2
#kruskal-Wallis test between live idna and killed idna
test3 = my_data3[my_data3$Treatment == "iDNA",]
res.kru3 <- kruskal.test(GenesPerMg ~ Group, data = test3)
res.kru3
res1 <- wilcoxon.test(GenesPerMg ~ Treatment, data = test1)
#or we can just perform multiple kruskal-wallis tests
#kruskal-Wallis test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
res1 <- wilcox.test(GenesPerMg ~ Treatment, data = test1)
res1
#or we can just perform multiple kruskal-wallis tests
#kruskal-Wallis test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
#or we can just perform multiple kruskal-wallis tests
#wilcoxon test between live idna and tdna
test1 = my_data3[my_data3$Group == "Live",]
res1 <- wilcox.test(GenesPerMg ~ Treatment, data = test1)
res1
test1 = my_data3[my_data3$Group == "Live",]
res1 <- wilcox.test(GenesPerMg ~ Treatment, data = test1)
res1
#wilcoxon test for difference between two gorups - killed idna and tdna
test2 = my_data3[my_data3$Group == "Killed",]
res2 <- wilcox.test(GenesPerMg ~ Treatment, data = test2)
res2
#wilcoxon test for difference between two gorups - live idna and killed idna
test3 = my_data3[my_data3$Treatment == "iDNA",]
res3 <- wilcox.test(GenesPerMg ~ Group, data = test3)
res3
?wilcox.test
#NON PARAMETRIC TESTS
#this performs kruskal-wallis test for differences between groups as well as post hoc dunn test for pairwise differences
dunn.test(my_data3$GenesPerMg, my_data3$CombiGroups, method = "none", altp=TRUE)
