#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
View(df_new)
df_new$V1 = gsub(".", "", df_new$V1)
df_new$V1 = gsub("\.[0−9]*$","", df_new$V1)
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
df_new$V1 = gsub("\.[0−9]*$","", df_new$V1)
x1<−c("weds.12","red.1","the.3")
x1<−c("weds.12","red.1","the.3")
x1<−gsub("\.[0-9]*$","",x1)
x1 <− c("weds.12","red.1","the.3")
x1 < c("weds.12","red.1","the.3")
x1 < c("weds.12","red.1","the.3")
x1 <- c("weds.12","red.1","the.3")
x1 <- gsub("\.[0-9]*$","",x1)
x1 <- gsub(".[0-9]*$","",x1)
df_new$V1 = gsub(".[0−9]*$","", df_new$V1)
View(df_new)
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
df_new$V1 = gsub(".*$","", df_new$V1)
View(df_new)
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
df_new$V1 = gsub("*.*$","", df_new$V1)
View(df_new)
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
df_new$V1 = gsub("\\.$","", df_new$V1)
View(df_new)
nams = gsub("\\.$","", df_new$V1)
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
nams = gsub("\\.","", df_new$V1)
data$Sample.Name = nams
View(data)
nams = gsub("\\D","", nams)
nams = gsub("\\.","", df_new$V1)
nams = gsub("D","", nams)
data$Sample.Name = nams
View(data)
View(data)
data$group = c("Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted",
"Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted")
View(data)
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
data$group = c("Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted",
"Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted")
View(data)
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
data$group = c("Undiluted", "Undiluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted",
"Diluted", "Undiluted",
"Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted")
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
data$group = c("Undiluted", "Undiluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted",
"Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted", "Undiluted", "Diluted", "Undiluted", "Diluted")
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
data$group = c("Undiluted", "Undiluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted",
"Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted")
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
nams = gsub("\\.","", df_new$V1)
nams = gsub("D","", nams)
data$Sample.Name = nams
View(data)
View(metadata)
#add metadata
left_join(data, metadata, by="Sample.Name")
#add metadata
df = left_join(data, metadata, by="Sample.Name")
View(df)
#add metadata
df = left_join(metadata, data, by="Sample.Name")
View(df)
#add metadata
df = left_join(data, metadata, by="Sample.Name")
View(df)
print(metadata$Sample.Name)
#add metadata
metadata$Sample.Name = gsub(" ", "", metadata$Sample.Name)
df = left_join(data, metadata, by="Sample.Name")
View(df)
View(df)
#back calculate gene abundances
df$GeneCopiesPerReaction = df$V2*4
#back calculate gene abundances
df$GeneCopiesPerReaction = as.numeric(df$V2)*4
View(df)
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(df$DNA.Concentration*4)
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(as.numeric(df$DNA.Concentration)*4)
#back calculate gene abundances
df = gsub("Below detection", "0.0025", df)
df = left_join(data, metadata, by="Sample.Name")
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", "0.0025", df$DNA.Concentration)
View(df)
df = left_join(data, metadata, by="Sample.Name")
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", 0.0025, df$DNA.Concentration)
df$GeneCopiesPerReaction = as.numeric(df$V2)*4
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(as.numeric(df$DNA.Concentration)*4)
df$GeneCopiesPeruLElute = df$GeneCopiesPerNgDNA * as.numeric(df$DNA.Concentration) #calculate gene copies per uL elute
i = 1
sam = df[i,]
View(sam)
for (i in 1:nrow(df)){
sam = df[i,]
if (sam$Double.Extraction == TRUE){
df$TotalGeneCopiesExtracted = df$GeneCopiesPeruLElute * 200
} elseif (sam$Double.Extraction == FALSE){
for (i in 1:nrow(df)){
sam = df[i,]
if (sam$Double.Extraction == TRUE){
df$TotalGeneCopiesExtracted = df$GeneCopiesPeruLElute * 200
} else if (sam$Double.Extraction == FALSE){
df$TotalGeneCopiesExtracted = df$GeneCopiesPeruLElute * 100
}
}
View(df)
df$GeneCopiesPerMgML = df$TotalGeneCopiesExtracted / df$Volume.Weight
df$GeneCopiesPerMgMl = df$TotalGeneCopiesExtracted / df$Volume.Weight #find the gene copies per mg or ml
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
data$group = c("Undiluted", "Undiluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted",
"Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted")
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
nams = gsub("\\.","", df_new$V1)
nams = gsub("D","", nams)
data$Sample.Name = nams
#add metadata
metadata$Sample.Name = gsub(" ", "", metadata$Sample.Name) #remove space from metadata names
df = left_join(data, metadata, by="Sample.Name")
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", 0.0025, df$DNA.Concentration) #replace below detection limit with half the detection limit
df$GeneCopiesPerReaction = as.numeric(df$V2)*4 #calculate gene copies per reaction
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(as.numeric(df$DNA.Concentration)*4) #calculate gene copies per ng DNA
df$GeneCopiesPeruLElute = df$GeneCopiesPerNgDNA * as.numeric(df$DNA.Concentration) #calculate gene copies per uL elute
for (i in 1:nrow(df)){ #multiply by volume of elute
sam = df[i,]
if (sam$Double.Extraction == TRUE){
df$TotalGeneCopiesExtracted = df$GeneCopiesPeruLElute * 200
} else if (sam$Double.Extraction == FALSE){
df$TotalGeneCopiesExtracted = df$GeneCopiesPeruLElute * 100
}
}
df$GeneCopiesPerMgMl = df$TotalGeneCopiesExtracted / df$Volume.Weight #find the gene copies per mg or ml
View(df)
View(inhib_test)
#multiplying by 10 if the sample is a diluted sample
df$NormalisedGeneCopies = df$GeneCopiesPerMgMl
df$NormalisedGeneCopies = df$GeneCopiesPerMgMl
for (i in 1:nrow(df)){
sam = df[i,]
if (sam$group == "Diluted"){
df$NormalisedGeneCopies = df$NormalisedGeneCopies * 10
}
}
View(df)
#multiplying by 10 if the sample is a diluted sample
df$NormalisedGeneCopies = df$GeneCopiesPerMgMl
#multiplying by 10 if the sample is a diluted sample
df$NormalisedGeneCopies = df$GeneCopiesPerMgMl
for (i in 1:nrow(df)){
sam = df[i,]
if (sam$group == "Diluted"){
sam$NormalisedGeneCopies = sam$NormalisedGeneCopies * 10
}
}
i = 1
sam = df[i,]
sam$group == "Diluted"
i = 3
sam = df[i,]
sam$group == "Diluted"
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", 0.0025, df$DNA.Concentration) #replace below detection limit with half the detection limit
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
data$group = c("Undiluted", "Undiluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted",
"Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted")
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
nams = gsub("\\.","", df_new$V1)
nams = gsub("D","", nams)
data$Sample.Name = nams
#add metadata
metadata$Sample.Name = gsub(" ", "", metadata$Sample.Name) #remove space from metadata names
df = left_join(data, metadata, by="Sample.Name")
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", 0.0025, df$DNA.Concentration) #replace below detection limit with half the detection limit
df$GeneCopiesPerReaction = as.numeric(df$V2)*4 #calculate gene copies per reaction
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(as.numeric(df$DNA.Concentration)*4) #calculate gene copies per ng DNA
df$GeneCopiesPeruLElute = df$GeneCopiesPerNgDNA * as.numeric(df$DNA.Concentration) #calculate gene copies per uL elute
for (i in 1:nrow(df)){ #multiply by volume of elute to get total gene copies extracted
sam = df[i,]
if (sam$Double.Extraction == TRUE){
sam$TotalGeneCopiesExtracted = sam$GeneCopiesPeruLElute * 200
} else if (sam$Double.Extraction == FALSE){
sam$TotalGeneCopiesExtracted = sam$GeneCopiesPeruLElute * 100
}
df[i,] = sam
}
df$GeneCopiesPerMgMl = df$TotalGeneCopiesExtracted / df$Volume.Weight #find the gene copies per mg or ml
#add metadata
metadata$Sample.Name = gsub(" ", "", metadata$Sample.Name) #remove space from metadata names
df = left_join(data, metadata, by="Sample.Name")
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", 0.0025, df$DNA.Concentration) #replace below detection limit with half the detection limit
df$GeneCopiesPerReaction = as.numeric(df$V2)*4 #calculate gene copies per reaction
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(as.numeric(df$DNA.Concentration)*4) #calculate gene copies per ng DNA
df$GeneCopiesPeruLElute = df$GeneCopiesPerNgDNA * as.numeric(df$DNA.Concentration) #calculate gene copies per uL elute
for (i in 1:nrow(df)){ #multiply by volume of elute to get total gene copies extracted
if (df[i,]$Double.Extraction == TRUE){
df[i,]$TotalGeneCopiesExtracted = df[i,]$GeneCopiesPeruLElute * 200
} else if (df[i,]$Double.Extraction == FALSE){
df[i,]$TotalGeneCopiesExtracted = df[i,]$GeneCopiesPeruLElute * 100
}
}
df$GeneCopiesPerMgMl = df$TotalGeneCopiesExtracted / df$Volume.Weight #find the gene copies per mg or ml
i = 1
df[i,]$Double.Extraction == TRUE
df[i,]$TotalGeneCopiesExtracted = df[i,]$GeneCopiesPeruLElute * 200
df$TotalGeneCopiesExtracted[i] = df$GeneCopiesPeruLElute[i] * 200
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
nams = gsub("\\.","", df_new$V1)
nams = gsub("D","", nams)
data$Sample.Name = nams
#add metadata
metadata$Sample.Name = gsub(" ", "", metadata$Sample.Name) #remove space from metadata names
df = left_join(data, metadata, by="Sample.Name")
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", 0.0025, df$DNA.Concentration) #replace below detection limit with half the detection limit
df$GeneCopiesPerReaction = as.numeric(df$V2)*4 #calculate gene copies per reaction
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(as.numeric(df$DNA.Concentration)*4) #calculate gene copies per ng DNA
df$GeneCopiesPeruLElute = df$GeneCopiesPerNgDNA * as.numeric(df$DNA.Concentration) #calculate gene copies per uL elute
for (i in 1:nrow(df)){ #multiply by volume of elute to get total gene copies extracted
if (df$Double.Extraction[i] == TRUE){
df$TotalGeneCopiesExtracted[i] = df$GeneCopiesPeruLElute[i] * 200
} else if (df$Double.Extraction[i] == FALSE){
df$TotalGeneCopiesExtracted[i] = df$GeneCopiesPeruLElute[i] * 100
}
}
df$GeneCopiesPerMgMl = df$TotalGeneCopiesExtracted / df$Volume.Weight #find the gene copies per mg or ml
df$NormalisedGeneCopies = df$GeneCopiesPerMgMl
for (i in 1:nrow(df)){
if (df$group[i] == "Diluted"){
df$NormalisedGeneCopies[i] = df$NormalisedGeneCopies[i] * 10
}
}
View(df)
#add log transformed data
df$log10genecopies = log10(df$NormalisedGeneCopies)
#Plot undiluted mean log10 gene copies mL-1 for each sample against mean log10 diluted gene copies mL-1.
#make dataset wide for plotting
data_wide <- spread(df, group, log10genecopies)
library(reshape)
#Plot undiluted mean log10 gene copies mL-1 for each sample against mean log10 diluted gene copies mL-1.
#make dataset wide for plotting
data_wide <- spread(df, group, log10genecopies)
library(reshape2)
#Plot undiluted mean log10 gene copies mL-1 for each sample against mean log10 diluted gene copies mL-1.
#make dataset wide for plotting
data_wide <- spread(df, group, log10genecopies)
library(reshape)
plot.df = cbind(df$Sample.Name, df$group, df$log10genecopies)
data_wide <- reshape(plot.df, idvar = "Sample.Name", timevar="group", direction="wide")
plot.df = as.data.frame(cbind(df$Sample.Name, df$group, df$log10genecopies))
data_wide <- reshape(plot.df, idvar = "Sample.Name", timevar="group", direction="wide")
View(plot.df)
data_wide <- reshape(plot.df, idvar = "V1", timevar="V2", direction="wide")
View(data_wide)
names(data_wide) = c("Sample", "Undiluted", "Diluted")
#plot
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
scale_y_continuous(breaks= pretty_breaks())+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
library(scales)
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
scale_y_continuous(breaks= pretty_breaks())+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
scale_y_discrete(breaks= pretty_breaks())+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
scale_y_discrete(breaks=function(n) c(0, floor(max(n)/2), max(n))) +
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
#Plot undiluted mean log10 gene copies mL-1 for each sample against mean log10 diluted gene copies mL-1.
#make dataset wide for plotting
plot.df = as.data.frame(cbind(df$Sample.Name, df$group, as.numeric(df$log10genecopies)))
data_wide <- reshape(plot.df, idvar = "V1", timevar="V2", direction="wide")
names(data_wide) = c("Sample", "Undiluted", "Diluted")
#plot
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
scale_y_discrete(breaks=function(n) c(0, floor(max(n)/2), max(n))) +
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
p = ggplot(data_wide, aes(x=Undiluted, y=Diluted)) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
View(data_wide)
plot(data_wide$Undiluted, data_wide$Diluted)
ggplot(data_wide, aes(x=Undiluted, y=Diluted)) + geom_point()
mtcars
class(mtcars$wt)
class(data_wide$Undiluted)
p = ggplot(data_wide, aes(x=as.numeric(Undiluted), y=as.numeric(Diluted))) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))
p
p = ggplot(data_wide, aes(x=as.numeric(Undiluted), y=as.numeric(Diluted))) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))
p
pdf("../results/inhibition-test-graph1.pdf", height=6, width=6)
print(p)
dev.off()
data_wide$log10Mean = (data_wide$Undiluted + data_wide$Diluted) / 2
plot.df2 = as.data.frame(cbind(df$Sample.Name, df$group, as.numeric(df$NormalisedGeneCopies)))
data_wide <- reshape(plot.df2, idvar = "V1", timevar="V2", direction="wide")
names(data_wide) = c("Sample", "Undiluted", "Diluted")
plot.df2 = as.data.frame(cbind(df$Sample.Name, df$group, as.numeric(df$NormalisedGeneCopies)))
data_wide2 <- reshape(plot.df2, idvar = "V1", timevar="V2", direction="wide")
names(data_wide2) = c("Sample", "Undiluted", "Diluted")
View(data_wide2)
#find the mean value using diluted and undiluted samples
plot.df2 = as.data.frame(cbind(df$Sample.Name, df$group, as.numeric(df$NormalisedGeneCopies)))
data_wide2 <- reshape(plot.df2, idvar = "V1", timevar="V2", direction="wide")
names(data_wide2) = c("Sample", "Undiluted", "Diluted")
data_wide2$Mean = (data_wide2$Undiluted + data_wide2$Diluted) / 2
data_wide2$Mean = (as.numeric(data_wide2$Undiluted) + as.numeric(data_wide2$Diluted)) / 2
View(data_wide2)
#plot
data_wide2$log10Mean = log10(data_wide2$Mean)
View(data_wide2)
#find the difference between the diluted and undiluted samples
data_wide2$Dif = data_wide2$Undiluted - data_wide2$Diluted
#find the difference between the diluted and undiluted samples
data_wide2$Dif = as.numeric(data_wide2$Undiluted) - as.numeric(data_wide2$Diluted)
#find the difference between the diluted and undiluted samples
data_wide2$log10Dif = log10(as.numeric(data_wide2$Undiluted) - as.numeric(data_wide2$Diluted))
mean_dif = mean(data_wide2$log10Dif)
#Clear workspace
rm(list=ls())
graphics.off()
#Clear workspace
rm(list=ls())
graphics.off()
#load packages
library(ggplot2)
library(PairedData)
library(dplyr)
library(reshape)
library(scales)
#results of inhibition test
inhib_test <- read.csv("../data/Solman-Standards-and-Inhibition-Test-090823_results.csv")
#qpcr metadata
metadata = read.csv("../data/qpcr-metadata.csv", sep=",")
inhib.data = inhib_test
#get column names
names(inhib.data) = inhib.data[7,]
#remove unwanted rows
inhib.data = inhib.data[8:(nrow(inhib.data)),]
#remove rows with empty "Task" Column
inhib.data = inhib.data[inhib.data$Task != "",]
#okay keep "UNKNOWN SAMPLES"
inhib.data.unknown = inhib.data[inhib.data$Task == "UNKNOWN",]
#remove rows with undetermined in with Ct
inhib.data.unknown = inhib.data.unknown[inhib.data.unknown$Cт != "Undetermined",]
#get only the data we need for this analysis
data = as.data.frame(unique(cbind(inhib.data.unknown$`Sample Name`, inhib.data.unknown$`Quantity Mean`)))
data$group = c("Undiluted", "Undiluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted",
"Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted", "Undiluted", "Undiluted", "Diluted", "Diluted")
#give sample names
df_new <- data %>% mutate(across(c('V1'), substr, 5, nchar(V1)))
nams = gsub("\\.","", df_new$V1)
nams = gsub("D","", nams)
data$Sample.Name = nams
#add metadata
metadata$Sample.Name = gsub(" ", "", metadata$Sample.Name) #remove space from metadata names
df = left_join(data, metadata, by="Sample.Name")
#back calculate gene abundances
df$DNA.Concentration = gsub("Below detection", 0.0025, df$DNA.Concentration) #replace below detection limit with half the detection limit
df$GeneCopiesPerReaction = as.numeric(df$V2)*4 #calculate gene copies per reaction
df$GeneCopiesPerNgDNA = df$GeneCopiesPerReaction/(as.numeric(df$DNA.Concentration)*4) #calculate gene copies per ng DNA
df$GeneCopiesPeruLElute = df$GeneCopiesPerNgDNA * as.numeric(df$DNA.Concentration) #calculate gene copies per uL elute
for (i in 1:nrow(df)){ #multiply by volume of elute to get total gene copies extracted
if (df$Double.Extraction[i] == TRUE){
df$TotalGeneCopiesExtracted[i] = df$GeneCopiesPeruLElute[i] * 200
} else if (df$Double.Extraction[i] == FALSE){
df$TotalGeneCopiesExtracted[i] = df$GeneCopiesPeruLElute[i] * 100
}
}
df$GeneCopiesPerMgMl = df$TotalGeneCopiesExtracted / df$Volume.Weight #find the gene copies per mg or ml
#multiplying by 10 if the sample is a diluted sample
df$NormalisedGeneCopies = df$GeneCopiesPerMgMl
for (i in 1:nrow(df)){
if (df$group[i] == "Diluted"){
df$NormalisedGeneCopies[i] = df$NormalisedGeneCopies[i] * 10
}
}
#add log transformed data
df$log10genecopies = log10(df$NormalisedGeneCopies)
#Plot undiluted mean log10 gene copies mL-1 for each sample against mean log10 diluted gene copies mL-1.
#make dataset wide for plotting
plot.df = as.data.frame(cbind(df$Sample.Name, df$group, as.numeric(df$log10genecopies)))
data_wide <- reshape(plot.df, idvar = "V1", timevar="V2", direction="wide")
names(data_wide) = c("Sample", "Undiluted", "Diluted")
#plot
p = ggplot(data_wide, aes(x=as.numeric(Undiluted), y=as.numeric(Diluted))) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
xlab(expression(paste("Undiluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg)")))+
ylab(expression(paste("Diluted log"[10]," DNA quantity (16S rRNA gene copies per mL/mg) * 10")))
p
p = ggplot(data_wide, aes(x=as.numeric(Undiluted), y=as.numeric(Diluted))) +
geom_point(size=6) +
geom_abline(slope=1, intercept = 0)+
theme_bw()+
xlab(expression(paste("Undiluted log"[10]," 16S rRNA gene copies per mL/mg")))+
ylab(expression(paste("Diluted log"[10]," 16S rRNA gene copies per mL/mg * 10")))
p
pdf("../results/inhibition-test-graph1.pdf", height=6, width=6)
print(p)
dev.off()
View(data_wide)
#let's get our data again but not the log10 data, just the real data
plot.df2 = as.data.frame(cbind(df$Sample.Name, df$group, as.numeric(df$NormalisedGeneCopies)))
data_wide2 <- reshape(plot.df2, idvar = "V1", timevar="V2", direction="wide")
names(data_wide2) = c("Sample", "Undiluted", "Diluted")
View(data_wide2)
#get the difference between each pair of values
data_wide2$dif = data_wide2$Undiluted - data_wide2$Diluted
#make sure our data is numeric
data_wide2$Undiluted = as.numeric(data_wide2$Undiluted)
data_wide2$Diluted = as.numeric(data_wide2$Diluted)
#get the difference between each pair of values
data_wide2$dif = data_wide2$Undiluted - data_wide2$Diluted
View(data_wide2)
#get the mean for each pair of values
data_wide2$mean = sum(data_wide2$Undiluted, data_wide2$Diluted)/2
View(data_wide2)
#get the mean for each pair of values
data_wide2$mean = sum(data_wide2$Undiluted, data_wide2$Diluted)
View(data_wide2)
#get the mean for each pair of values
data_wide2$mean = (data_wide2$Undiluted + data_wide2$Diluted)
View(data_wide2)
#get the mean for each pair of values
data_wide2$mean = (data_wide2$Undiluted + data_wide2$Diluted)/2
plot(log10(data_wide2$mean), log10(data_wide2$dif))
#alternatively we cn use the log10 values to calculate the mean and the difference
data_wide$log10Dif = data_wide$Undiluted - data_wide$Diluted
