for (i in 1:length(unique_regions)){
name = unique_regions[i]
res <- am_i_abundant_region(phylo, name, rare, abundant)
res_list <- c(res_list, res)
return(res_list)
}
res_list <- list()
for (i in 1:length(unique_regions)){
name = unique_regions[i]
res <- am_i_abundant_region(phylo, name, rare, abundant)
res_list <- c(res_list, res)
}
#transform to relative abundance data
phylo2  = transform_sample_counts(phylo, function(x) x / sum(x) )
#subset data by region name (e.g. Region, McMurdo_Dry_Valleys)
phylo3 <- subset_samples(phylo2, Region == name)
#remove ASVs with 0 relative abundance
phylo3.filter <- filter_taxa(phylo3, function(x) sum(x) > 0, TRUE)
#define rare taxa
phylo3.filter.rare <- filter_taxa(phylo3.filter, function(x) mean(x) <= rare, TRUE)
abundace_by_region_phylo <- function(phylo, rare, abundant){
unique_regions <- unique(data.frame(sample_data(phylo))$Region)
res_list <- list()
for (i in 1:length(unique_regions)){
name = unique_regions[i]
res <- am_i_abundant_region(phylo, name, rare, abundant)
res_list <- c(res_list, res)
}
return(res_list)
}
pro_res <- abundace_by_region_phylo(ps_pro, 0.001, 0.0005)
unique_regions <- unique(data.frame(sample_data(phylo))$Region)
res_list <- list()
for (i in 1:length(unique_regions)){
name = unique_regions[i]
res <- am_i_abundant_region(phylo, name, rare, abundant)
res_list <- c(res_list, res)
}
x <- data.frame(sample_data(phylo))
View(x)
x <- data.frame(sample_data(phylo3.filter))
x <- data.frame(otu_table(phylo3.filter))
View(x)
rowMeans(x)
x$Means <- rowMeans(x)
y <- x[which(x[,3]<0.0001),]
y <- x[which(x[,3]<0.00001),]
y <- x[which(x[,4]<0.00001),]
y <- x[which(x[,4]<0.0001),]
pro_res <- abundace_by_region_phylo(ps_pro, 0.0001, 0.05)
euk_res <- abundace_by_region_phylo(ps_euk, 0.0001, 0.05)
View(euk_res)
#prokaryotic rare
pro_rare_mcmurdo <- pro_res[[1]]
pro_rare_green <- pro_res[[4]]
data.frame(sample_data(pro_rare_green))
View(data.frame(sample_data(pro_rare_green)))
pro_res[[1]]
# phylo <- ps_pro
# name <- "McMurdo_Dry_Valleys"
# rare <- 0.00001
# abundant <- 0.0005
# mcmurdo_res <- am_i_abundant_region(ps_pro, "McMurdo_Dry_Valleys", 0.00001, 0.0005)
# mcmurdo_rare <- mcmurdo_res[[1]]
am_i_abundant_region <- function(phylo, name, rare, abundant){
#transform to relative abundance data
phylo2  = transform_sample_counts(phylo, function(x) x / sum(x) )
#subset data by region name (e.g. Region, McMurdo_Dry_Valleys)
phylo3 <- subset_samples(phylo2, Region == name)
#remove ASVs with 0 relative abundance
phylo3.filter <- filter_taxa(phylo3, function(x) sum(x) > 0, TRUE)
#define rare taxa
phylo3.filter.rare <- filter_taxa(phylo3.filter, function(x) mean(x) <= rare, TRUE)
sample_data(phylo3.filter.rare)$Type <- "Rare"
#define abundant taxa
phylo3.filter.abun <- filter_taxa(phylo3.filter, function(x) mean(x) >= abundant, TRUE)
sample_data(phylo3.filter.abun)$Type <- "Abundant"
#define intermediate taxa
phylo3.filter.int <- filter_taxa(phylo3.filter, function(x) mean(x) > rare & mean(x) < abundant, TRUE)
sample_data(phylo3.filter.int)$Type <- "Intermediate"
#get ASV IDs and abundance class into a dataframe
# rare_ID <- rownames(data.frame(otu_table(phylo3.filter.rare)))
# abun_ID <- rownames(data.frame(otu_table(phylo3.filter.abun)))
# int_ID <- rownames(data.frame(otu_table(phylo3.filter.int)))
# my_IDs_and_abundance <- data.frame(ASV_ID = c(rare_ID, abun_ID, int_ID), Abun_Class= c(rep("Rare", length(rare_ID)), rep("Abundant", length(abun_ID)), rep("Intermediate", length(int_ID))))
my_phylos <- list(phylo3.filter.rare, phylo3.filter.abun, phylo3.filter.int)
return(my_phylos)
}
abundace_by_region_phylo <- function(phylo, rare, abundant){
unique_regions <- unique(data.frame(sample_data(phylo))$Region)
res_list <- list()
for (i in 1:length(unique_regions)){
name = unique_regions[i]
res <- am_i_abundant_region(phylo, name, rare, abundant)
res_list <- c(res_list, res)
}
return(res_list)
}
pro_res <- abundace_by_region_phylo(ps_pro, 0.0001, 0.05)
euk_res <- abundace_by_region_phylo(ps_euk, 0.0001, 0.05)
#prokaryotic
data.frame(sample_data(pro_res[[1]]))$Type
#prokaryotic
data.frame(sample_data(pro_res[[1]]))$Type[1]
data.frame(sample_data(pro_res[[1]]))$Region[1]
x <- data.frame(sample_data(pro_res[[1]]))$Type[1]
y <- data.frame(sample_data(pro_res[[1]]))$Region[1]
phylo_name <- paste0(x, "-", y)
i = 1
phylo_name <-
paste0(x, "-", y) <- pro_res[[i]]
data.frame(sample_data(pro_res[[i]]))$Type[1]
for(i in 1:length(pro_res)) {
assign(paste0(data.frame(sample_data(pro_res[[i]]))$Type[1], "-", data.frame(sample_data(pro_res[[i]]))$Region[1]), pro_res[[i]])
}
new_phylo <- pro_res[[i]]
for(i in 1:length(pro_res)) {
new_phylo <- pro_res[[i]]
assign(paste0(data.frame(sample_data(pro_res[[i]]))$Type[1], "-", data.frame(sample_data(pro_res[[i]]))$Region[1]), new_phylo)
}
Abundant-Sweden
`Abundant-Sweden`
`Intermediate-Sweden`
`Rare-Sweden`
pro_res[[1]]
pro_res[[4]]
pro_res[[7]]
abundace_by_region_phylo <- function(phylo, rare, abundant){
unique_regions <- unique(data.frame(sample_data(phylo))$Region)
res_list <- list()
for (i in 1:length(unique_regions)){
name = unique_regions[i]
res <- am_i_abundant_region(phylo, name, rare, abundant)
res_list[i] <- res
}
return(res_list)
}
pro_res <- abundace_by_region_phylo(ps_pro, 0.001, 0.05)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
graphics.off()
library(vegan)
library(geosphere)
library(ggplot2)
#install.packages("ggsignif")
#library(ggsignif)
#TOTAL DATASET
ps <- readRDS("../../results/16S/phylo-objects/16S-phyloseq-object-rarefied-decontam.rds")
#Total Abundant
ps.abun <- readRDS("../../results/16S/phylo-objects/16S-total-abundant.rds")
#Total Intermediate
ps.int <- readRDS("../../results/16S/phylo-objects/16S-total-intermediate.rds")
#Total Rare
ps.rare <- readRDS("../../results/16S/phylo-objects/16S-total-rare.rds")
my_counts_hell <- function(phylo){
spe <- data.frame(t(otu_table(phylo)))
# #get out taxonomy table
# tax_tab <- data.frame(tax_table(phylo))
# #replace NAs with Unknown
# tax_tab[is.na(tax_tab)] <- "Unknown"
# colnames(spe) <- tax_tab[, level]
#
# #aggregate count data
# x <- t(spe)
# new_df=aggregate(x, by=list(rownames(x)),sum)
# new_counts <- t(new_df)
# colnames(new_counts) <- new_counts[1,]
# new_counts <- new_counts[-1,]
# df <- data.frame(new_counts)
# #make dataframe numeric
# df[] <- lapply(df, as.numeric)
# df <- df[,! names(df) %in% c("Unknown")]
# Hellinger-transform the species dataset
spp.h <- as.data.frame(decostand(spe, "hellinger"))
return(spp.h)
}
#Function testing area
# phylo = ps
# level = "Phylum"
#df1 <- agg_my_counts_hell(ps, "Phylum")
get_my_meta <- function(phylo){
#Get metadata of samples
samp_data <- data.frame(sample_data(phylo))
#list of variables we're interested in
# keeps <- c("Group", "Distance_To_Sea", "Elevation", "Water_Depth", "Sediment_Depth", "Total_Depth","Conductivity", "pH", "DOC_mgL.1",
#            "Cl_merge", "SO4_merge", "Na_merge", "K_merge", "Mg_merge","Ca_merge", "HCO3_merge", "Radius", "EW", "NS")
keeps <- c("Group", "Conductivity", "pH",
"Cl_merge", "SO4_merge", "Na_merge", "K_merge", "Mg_merge","Ca_merge", "Radius", "EW", "NS")
samp_data <- samp_data[ , (names(samp_data) %in% keeps)]
#get cryoconite hole areas
area1 <- pi*samp_data$Radius^2
area2 <- pi*(samp_data$NS/2)*(samp_data$EW/2)
samp_data$Area <- coalesce(area1,area2)
# diversity_index <- estimate_richness(phylo)
# #Merge into datafrome
# samp_data$Observed <- diversity_index$Observed
# samp_data$Shannon <- diversity_index$Shannon
drops <- c("EW", "NS", "Radius")
samp_data <- samp_data[ , !(names(samp_data) %in% drops)]
#make sure data are numeric
samp_data[1:10] <- data.frame(lapply(samp_data[1:10],as.numeric))
#change sample names
names(samp_data) <- c("Group", "Conductivity", "pH", "Cl", "SO4", "Na", "K", "Mg","Ca", "Area")
# #remove columns with more than 50% missing variables
# samp_data_trim <- samp_data[ lapply( samp_data, function(x) sum(is.na(x)) / length(x) ) < 0.5 ]
#
# #Only keep complete cases
# samp_data_trim_complete <- samp_data_trim[complete.cases(samp_data_trim),]
return(samp_data)
}
#Test function
# phylo = ps
# res <- diversity_and_meta(ps)
get_my_long_lat <- function(phylo){
#get metadata
meta <- data.frame(sample_data(phylo))
#put a negative sign in front of all the south latitude coords
for (i in 1:nrow(meta)){
if (meta$Pole[i] == "Antarctic"){
meta$Glacier_Latitude[i] <- c(paste0("-", meta$Glacier_Latitude[i]))
meta$Cryoconite_Latitude[i] <- c(paste0("-", meta$Cryoconite_Latitude[i]))
}
}
#Some of our cryoconite holes don't have specific coords so we'll use the glacier coordinates
#remove letters from glacier coord strings
meta$Glacier_Latitude <- as.numeric(str_sub(meta$Glacier_Latitude,1,nchar(meta$Glacier_Latitude)-1))
meta$Glacier_Longitude <- as.numeric(str_sub(meta$Glacier_Longitude,1,nchar(meta$Glacier_Longitude)-1))
glac_lat <- meta$Glacier_Latitude
glac_long <- meta$Glacier_Longitude
#get latitude of each sample
cryo_lat <- as.numeric(meta$Cryoconite_Latitude)
#get longitude of each sample
cryo_long <- as.numeric(meta$Cryoconite_Longitude)
#replace any missing cryoconite coords with those of it's glacier
for (j in 1:length(cryo_lat)){
if (is.na(cryo_lat[j])){
cryo_lat[j] <- glac_lat[j]
cryo_long[j] <- glac_long[j]
}
}
#put into matrix
long.lat <- as.data.frame(cbind(cryo_long, cryo_lat))
rownames(long.lat) = rownames(meta)
return(long.lat)
}
# #Test function
# phylo = ps
# res <- get_my_long_lat(ps)
spp.h <- my_counts_hell(phylo)
phylo = ps
community = "Total"
spp.h <- my_counts_hell(phylo)
meta <- get_my_meta(phylo)
long.lat <- get_my_long_lat(phylo)
#taxa
dist.abun <- vegdist(spp.h, method='bray')
#env
#scale data
scale.env = scale(meta, center = TRUE, scale = TRUE)
dist.env <- dist(scale.env, method='euclidean')
#geo
d.geo <- distm(long.lat, fun=distHaversine)
dist.geo <- as.dist(d.geo)
# dist.geo <-vegdist(long.lat, method="euclidean")
#abundance vs environmental
abund_env = mantel(dist.abun, dist.env, method = "spearman", permutations = 9999, na.rm = TRUE)
abund_env
abund_env
# phylo = ps
# community = "Total"
plot_my_mantel <- function(phylo, community){
spp.h <- my_counts_hell(phylo)
meta <- get_my_meta(phylo)
long.lat <- get_my_long_lat(phylo)
#taxa
dist.abun <- vegdist(spp.h, method='bray')
#env
#scale data
scale.env = scale(meta, center = TRUE, scale = TRUE)
dist.env <- dist(scale.env, method='euclidean')
#geo
d.geo <- distm(long.lat, fun=distHaversine)
dist.geo <- as.dist(d.geo)
# dist.geo <-vegdist(long.lat, method="euclidean")
#abundance vs environmental
abund_env = mantel(dist.abun, dist.env, method = "spearman", permutations = 9999, na.rm = TRUE)
abund_env
#abundance vs geographic
abund_geo  = mantel(dist.abun, dist.geo, method = "spearman", permutations = 9999, na.rm = TRUE)
abund_geo
# Environmental while controlling for geographic
env_cont_geo = mantel.partial(dist.abun, dist.env, dist.geo, method="pearson", permutations=9999)
env_cont_geo
# Geographic while controlling for environmental
geo_cont_env = mantel.partial(dist.abun, dist.geo, dist.env, method="pearson", permutations=9999)
geo_cont_env
#Dataframe of results
results <- data.frame(Factors=c("Environmental", "Spatial", "Env Cont Spatial", "Spatial Cont Env"), RStat=c(abund_env$statistic, abund_geo$statistic, env_cont_geo$statistic, geo_cont_env$statistic), Pval=c(abund_env$signif, abund_geo$signif, env_cont_geo$signif, geo_cont_env$signif))
#Plot results
env <- abund_env$statistic
spa <- abund_geo$statistic
env_spa <- env_cont_geo$statistic
spa_env <- geo_cont_env$statistic
stat_df <- data.frame(mod=c("env", "spa", "env | spa", "spa | env"), stat=c(env, spa, env_spa, spa_env))
#create label dataframe
#label.df <- data.frame(mod = c("env"),stat = c(0.22)) #add significance labels if necessary
p <- ggplot(data=stat_df, aes(x=mod, y=stat))+
geom_bar(stat="identity")+
ggtitle(paste0(community, " Taxa Mantel/Partial Mantel Tests for Cor with Enviro/Spatial Factors"))+
xlab("Factors")+
ylab("Correlation Coefficient")
#geom_text(data = label.df, label = "***")
#save plot
pdf(paste0("../../results/16S/graphs/mantel-tests/", community, "-mantel-partial-mantel-test.pdf"))
print(p)
dev.off()
return(results)
}
res_total <- plot_my_mantel(ps, "Total")
res_abun <- plot_my_mantel(ps.abun, "Abundant")
res_int <- plot_my_mantel(ps.int, "Intermediate")
res_rare <- plot_my_mantel(ps.rare, "Rare")
#combine dataframes and export
final_df <- rbind(res_total, res_abun, res_int, res_rare)
final_df$Community <- c(rep("Total", 4), rep("Abundant", 4), rep("Intermediate", 4), rep("Rare", 4))
final_df$RStat <- round(final_df$RStat, digits=4)
final_df$Pval <- round(final_df$Pval, digits=4)
write.csv(final_df, "../../results/16S/tables/mantel-test-results.csv")
phylo = ps
community = "Total"
spp.h <- my_counts_hell(phylo)
spp.h <- my_counts_hell(phylo)
meta <- get_my_meta(phylo)
long.lat <- get_my_long_lat(phylo)
#taxa
dist.abun <- vegdist(spp.h, method='bray')
#env
#scale data
scale.env = scale(meta, center = TRUE, scale = TRUE)
dist.env <- dist(scale.env, method='euclidean')
#geo
d.geo <- distm(long.lat, fun=distHaversine)
dist.geo <- as.dist(d.geo)
#abundance vs environmental
abund_env = mantel(dist.abun, dist.env, method = "spearman", permutations = 9999, na.rm = TRUE)
#abundance vs environmental
abund_env = mantel(dist.abun, dist.env, method = "spearman", permutations = 9999, na.rm = TRUE)
abund_env
#abundance vs geographic
abund_geo  = mantel(dist.abun, dist.geo, method = "spearman", permutations = 9999, na.rm = TRUE)
#abundance vs geographic
abund_geo  = mantel(dist.abun, dist.geo, method = "spearman", permutations = 9999, na.rm = TRUE)
abund_geo
# Environmental while controlling for geographic
env_cont_geo = mantel.partial(dist.abun, dist.env, dist.geo, method="pearson", permutations=9999)
env_cont_geo
# Geographic while controlling for environmental
geo_cont_env = mantel.partial(dist.abun, dist.geo, dist.env, method="pearson", permutations=9999)
geo_cont_env
#Dataframe of results
results <- data.frame(Factors=c("Environmental", "Spatial", "Env Cont Spatial", "Spatial Cont Env"), RStat=c(abund_env$statistic, abund_geo$statistic, env_cont_geo$statistic, geo_cont_env$statistic), Pval=c(abund_env$signif, abund_geo$signif, env_cont_geo$signif, geo_cont_env$signif))
View(results)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
graphics.off()
library(vegan)
library(geosphere)
library(ggplot2)
#install.packages("ggsignif")
#library(ggsignif)
#TOTAL DATASET
ps <- readRDS("../../results/18S/phylo-objects/18S-phyloseq-object-rarefied.rds")
#Total Abundant
ps.abun <- readRDS("../../results/18S/phylo-objects/18S-total-abundant.rds")
#Total Intermediate
ps.int <- readRDS("../../results/18S/phylo-objects/18S-total-intermediate.rds")
#Total Rare
ps.rare <- readRDS("../../results/18S/phylo-objects/18S-total-rare.rds")
my_counts_hell <- function(phylo){
spe <- data.frame(t(otu_table(phylo)))
# #get out taxonomy table
# tax_tab <- data.frame(tax_table(phylo))
# #replace NAs with Unknown
# tax_tab[is.na(tax_tab)] <- "Unknown"
# colnames(spe) <- tax_tab[, level]
#
# #aggregate count data
# x <- t(spe)
# new_df=aggregate(x, by=list(rownames(x)),sum)
# new_counts <- t(new_df)
# colnames(new_counts) <- new_counts[1,]
# new_counts <- new_counts[-1,]
# df <- data.frame(new_counts)
# #make dataframe numeric
# df[] <- lapply(df, as.numeric)
# df <- df[,! names(df) %in% c("Unknown")]
# Hellinger-transform the species dataset
spp.h <- as.data.frame(decostand(spe, "hellinger"))
return(spp.h)
}
#Function testing area
# phylo = ps
# level = "Phylum"
#df1 <- agg_my_counts_hell(ps, "Phylum")
get_my_meta <- function(phylo){
#Get metadata of samples
samp_data <- data.frame(sample_data(phylo))
#list of variables we're interested in
# keeps <- c("Group", "Distance_To_Sea", "Elevation", "Water_Depth", "Sediment_Depth", "Total_Depth","Conductivity", "pH", "DOC_mgL.1",
#            "Cl_merge", "SO4_merge", "Na_merge", "K_merge", "Mg_merge","Ca_merge", "HCO3_merge", "Radius", "EW", "NS")
keeps <- c("Group", "Conductivity", "pH",
"Cl_merge", "SO4_merge", "Na_merge", "K_merge", "Mg_merge","Ca_merge", "Radius", "EW", "NS")
samp_data <- samp_data[ , (names(samp_data) %in% keeps)]
#get cryoconite hole areas
area1 <- pi*samp_data$Radius^2
area2 <- pi*(samp_data$NS/2)*(samp_data$EW/2)
samp_data$Area <- coalesce(area1,area2)
# diversity_index <- estimate_richness(phylo)
# #Merge into datafrome
# samp_data$Observed <- diversity_index$Observed
# samp_data$Shannon <- diversity_index$Shannon
drops <- c("EW", "NS", "Radius")
samp_data <- samp_data[ , !(names(samp_data) %in% drops)]
#make sure data are numeric
samp_data[1:10] <- data.frame(lapply(samp_data[1:10],as.numeric))
#change sample names
names(samp_data) <- c("Group", "Conductivity", "pH", "Cl", "SO4", "Na", "K", "Mg","Ca", "Area")
# #remove columns with more than 50% missing variables
# samp_data_trim <- samp_data[ lapply( samp_data, function(x) sum(is.na(x)) / length(x) ) < 0.5 ]
#
# #Only keep complete cases
# samp_data_trim_complete <- samp_data_trim[complete.cases(samp_data_trim),]
return(samp_data)
}
#Test function
# phylo = ps
# res <- diversity_and_meta(ps)
get_my_long_lat <- function(phylo){
#get metadata
meta <- data.frame(sample_data(phylo))
#put a negative sign in front of all the south latitude coords
for (i in 1:nrow(meta)){
if (meta$Pole[i] == "Antarctic"){
meta$Glacier_Latitude[i] <- c(paste0("-", meta$Glacier_Latitude[i]))
meta$Cryoconite_Latitude[i] <- c(paste0("-", meta$Cryoconite_Latitude[i]))
}
}
#Some of our cryoconite holes don't have specific coords so we'll use the glacier coordinates
#remove letters from glacier coord strings
meta$Glacier_Latitude <- as.numeric(str_sub(meta$Glacier_Latitude,1,nchar(meta$Glacier_Latitude)-1))
meta$Glacier_Longitude <- as.numeric(str_sub(meta$Glacier_Longitude,1,nchar(meta$Glacier_Longitude)-1))
glac_lat <- meta$Glacier_Latitude
glac_long <- meta$Glacier_Longitude
#get latitude of each sample
cryo_lat <- as.numeric(meta$Cryoconite_Latitude)
#get longitude of each sample
cryo_long <- as.numeric(meta$Cryoconite_Longitude)
#replace any missing cryoconite coords with those of it's glacier
for (j in 1:length(cryo_lat)){
if (is.na(cryo_lat[j])){
cryo_lat[j] <- glac_lat[j]
cryo_long[j] <- glac_long[j]
}
}
#put into matrix
long.lat <- as.data.frame(cbind(cryo_long, cryo_lat))
rownames(long.lat) = rownames(meta)
return(long.lat)
}
# #Test function
# phylo = ps
# res <- get_my_long_lat(ps)
phylo = ps
community = "Total"
spp.h <- my_counts_hell(phylo)
meta <- get_my_meta(phylo)
long.lat <- get_my_long_lat(phylo)
#taxa
dist.abun <- vegdist(spp.h, method='bray')
#env
#scale data
scale.env = scale(meta, center = TRUE, scale = TRUE)
dist.env <- dist(scale.env, method='euclidean')
#geo
d.geo <- distm(long.lat, fun=distHaversine)
dist.geo <- as.dist(d.geo)
#abundance vs environmental
abund_env = mantel(dist.abun, dist.env, method = "spearman", permutations = 9999, na.rm = TRUE)
#abundance vs environmental
abund_env = mantel(dist.abun, dist.env, method = "spearman", permutations = 9999, na.rm = TRUE)
abund_env
#abundance vs geographic
abund_geo  = mantel(dist.abun, dist.geo, method = "spearman", permutations = 9999, na.rm = TRUE)
abund_geo
# Environmental while controlling for geographic
env_cont_geo = mantel.partial(dist.abun, dist.env, dist.geo, method="pearson", permutations=9999)
env_cont_geo
# Geographic while controlling for environmental
geo_cont_env = mantel.partial(dist.abun, dist.geo, dist.env, method="pearson", permutations=9999)
# Geographic while controlling for environmental
geo_cont_env = mantel.partial(dist.abun, dist.geo, dist.env, method="pearson", permutations=9999)
geo_cont_env
#Dataframe of results
results <- data.frame(Factors=c("Environmental", "Spatial", "Env Cont Spatial", "Spatial Cont Env"), RStat=c(abund_env$statistic, abund_geo$statistic, env_cont_geo$statistic, geo_cont_env$statistic), Pval=c(abund_env$signif, abund_geo$signif, env_cont_geo$signif, geo_cont_env$signif))
View(results)
install.packages("BiodiversityR")
#install.packages("BiodiversityR") #for rank abundance plot
library(BiodiversityR)
library(BiodiversityR)
?rankabundance
install.packages("BiodiversityR") #for rank abundance plot
library(BiodiversityR)
