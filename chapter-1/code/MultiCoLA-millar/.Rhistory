y1$Type <- "Rare"
y2 <- data.frame(rare.corr.all[[2]])
y2$Rank <- "Class"
y2$Type <- "Rare"
y3 <- data.frame(rare.corr.all[[3]])
y3$Rank <- "Order"
y3$Type <- "Rare"
y4 <- data.frame(rare.corr.all[[4]])
y4$Rank <- "Family"
y4$Type <- "Rare"
y5 <- data.frame(rare.corr.all[[5]])
y5$Rank <- "Genus"
y5$Type <- "Rare"
y6 <- data.frame(rare.corr.all[[6]])
y6$Rank <- "Species"
y6$Type <- "Rare"
y7 <- data.frame(rare.corr.all[[7]])
y7$Rank <- "Classified"
y7$Type <- "Rare"
y8 <- data.frame(rare.corr.all[[8]])
y8$Rank <- "Total"
y8$Type <- "Rare"
x1 <- data.frame(dom.corr.all[[1]])
x1$Rank <- "Phylum"
x1$Type <- "Dominant"
x2 <- data.frame(dom.corr.all[[2]])
x2$Rank <- "Class"
x2$Type <- "Dominant"
x3 <- data.frame(dom.corr.all[[3]])
x3$Rank <- "Order"
x3$Type <- "Dominant"
x4 <- data.frame(dom.corr.all[[4]])
x4$Rank <- "Family"
x4$Type <- "Dominant"
x5 <- data.frame(dom.corr.all[[5]])
x5$Rank <- "Genus"
x5$Type <- "Dominant"
x6 <- data.frame(dom.corr.all[[6]])
x6$Rank <- "Species"
x6$Type <- "Dominant"
x7 <- data.frame(dom.corr.all[[7]])
x7$Rank <- "Classified"
x7$Type <- "Dominant"
x8 <- data.frame(dom.corr.all[[8]])
x8$Rank <- "Total"
x8$Type <- "Dominant"
total_results <- rbind(x1,x2,x3, x4, x5, x6, x7, x8, y1, y2, y3, y4, y5, y6, y7, y8)
Truncated <- rownames(x1)
#Add truncated values to rare results
#Subset dataframe
rare <- total_results[total_results$Type == "Rare",]
rare$Truncated = as.numeric(rep(Truncated, 8))
#Add reverse truncated values to dominant results
#Subset dataframe
dom <- total_results[total_results$Type == "Dominant",]
dom$Truncated = as.numeric(rep(rev(Truncated), 8))
#bind the data frames
total_results_rare_dom <- rbind(rare, dom)
#export
write.csv(total_results_rare_dom, paste0("results/", group, "-", pole, "-total-results.csv"))
# 6) Plot results
#Rare Spearman's rank results
#Subset dataframe
rare <- total_results_rare_dom[total_results_rare_dom$Type == "Rare",]
#At what truncation point does the total dataset drop below 0.8 coefficient?
rare_tot <- rare[rare$Rank == "Total",]
rare_tot_trim <- rare_tot[rare_tot$corrcoeff < 0.85,]
rare_tot_value <- as.numeric(rare_tot_trim$Truncated[1])
p1 <- ggplot(rare, aes(x=Truncated, y=corrcoeff, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = rare$Truncated)+
theme_bw()+
geom_vline(xintercept = rare_tot_value, linetype="dotted",
color = "blue", size=1)+
xlab("% Total Rare ASVs Removed")+
ylab("Spearman's Correlation Coefficient")+
ggtitle(paste0(group, " ", pole," data set-based Spearman's correlation coefficients between original\n data set dissimilarity matrix and matrices truncated by increasing removal of \nrare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-spearmans-plot-rare.pdf"))
print(p1)
dev.off()
#Rare Procrustes results
#At what truncation point does the total dataset drop below 0.8 R value?
rare_tot_trim_R <- rare_tot[rare_tot$R.Procrustes < 0.95,]
rare_tot_value_R <- as.numeric(rare_tot_trim_R$Truncated[1])
p2 <- ggplot(rare, aes(x=Truncated, y=R.Procrustes, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = rare$Truncated)+
theme_bw()+
geom_vline(xintercept = rare_tot_value_R, linetype="dotted",
color = "blue", size=1)+
xlab("% Total Rare ASVs Removed")+
ylab("Procrustes R Value")+
ggtitle(paste0(group, " ", pole," data set-based Procrustes R value between original data set\n NMDS and datasets truncated by increasing removal of\n rare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-procrustes-plot-rare.pdf"))
print(p2)
dev.off()
#Dominant Spearman's rank results
dom <- total_results_rare_dom[total_results_rare_dom$Type == "Dominant",]
#At what truncation point does the total dataset drop below 0.8 coefficient?
dom_tot <- dom[dom$Rank == "Total",]
dom_tot_trim <- dom_tot[dom_tot$corrcoeff < 0.8,]
dom_tot_value <- as.numeric(dom_tot_trim$Truncated[1])
p3 <- ggplot(dom, aes(x=Truncated, y=corrcoeff, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = dom$Truncated)+
theme_bw()+
geom_vline(xintercept = dom_tot_value, linetype="dotted",
color = "blue", size=1)+
xlab("% Total Rare ASVs")+
ylab("Spearman's Correlation Coefficient")+
ggtitle(paste0(group, " ", pole," data set-based Spearman's correlation coefficients between original \n data set dissimilarity matrix and matrices with increasing addition of rare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-spearmans-plot-dominant.pdf"))
print(p3)
dev.off()
#Dominant Procrustes results
#At what truncation point does the total dataset drop below 0.8 R value?
dom_tot_trim_R <- dom_tot[dom_tot$R.Procrustes < 0.9,]
dom_tot_value_R <- as.numeric(dom_tot_trim_R$Truncated[1])
p4 <- ggplot(dom, aes(x=Truncated, y=R.Procrustes, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = dom$Truncated)+
theme_bw()+
geom_vline(xintercept = dom_tot_value_R, linetype="dotted",
color = "blue", size=1)+
xlab("% ASVs Removed")+
ylab("Procrustes R Value")+
ggtitle(paste0(group, " ", pole," data set-based Procrustes R value between original data set\n NMDS and datasets truncated by increasing addition of rare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-procrustes-plot-dominant.pdf"))
print(p4)
dev.off()
# 7) Defining our subcommunities and cut-offs
#rare community is comprised of the...
rare_community = 1-rare_tot_value
#...% least abundant taxa
#abundant community is comprised of the...
abundant_community = dom_tot_value
#...% most abundant taxa
#What is number of sequences in the rare_community% of total counts
rare_total_counts <- sum(colSums(M[1:(ncol(M)-6)]))*rare_community
#What is number of sequences in the abundant_community% of total counts
abun_total_counts <- sum(colSums(M[1:(ncol(M)-6)]))*abundant_community
#Identify how many ASVs fall into the rare/abundant/intermediate categories according to these results
asv_tab <- data.frame(otu_table(my_phylo))
asv_abun <- data.frame(rowSums(asv_tab))
order_abun <- data.frame(asv_abun[order(-asv_abun$rowSums.asv_tab.), , drop=FALSE])
order_abun_rev <- data.frame(asv_abun[order(asv_abun$rowSums.asv_tab.), , drop=FALSE])
my_counts <- c(0)
for (i in 1:nrow(order_abun)){
my_counts <- c(my_counts, order_abun$rowSums.asv_tab.[i] + my_counts[i])
}
my_counts <-my_counts[-c(1)]
order_abun$Total_Counts <- my_counts
my_counts_2 <- c(0)
for (i in 1:nrow(order_abun_rev)){
my_counts_2 <- c(my_counts_2, order_abun_rev$rowSums.asv_tab.[i] + my_counts_2[i])
}
my_counts_2 <-my_counts_2[-c(1)]
order_abun_rev$Total_Counts <- my_counts_2
#Subset Abundant community
abun_com <- order_abun[order_abun$Total_Counts <= abun_total_counts, ]
#Subset Rare community
rare_com <- order_abun_rev[order_abun_rev$Total_Counts <= rare_total_counts,]
#Subset Intermediate community
int_com <- order_abun[!(row.names(order_abun) %in% row.names(abun_com)),]
int_com <- int_com[!(row.names(int_com) %in% row.names(rare_com)),]
#What percentage relative abundance across the whole dataset does this equate to?
#find the relative abundance of each ASV
rel_abun <- data.frame(rowSums(M[1:(ncol(M)-6)])/sum(rowSums(M[1:(ncol(M)-6)])))
#Within what relative abundance threshold do the abundant community fall?
rel_abun_abundant <- data.frame(rel_abun[row.names(rel_abun) %in% row.names(abun_com),])
abun_lowest_val <- round(min(rel_abun_abundant), 2)
#Within what relative abundance threshold to the rare community fall?
rel_abun_rare <- data.frame(rel_abun[row.names(rel_abun) %in% row.names(rare_com),])
rare_highest_val <- round(max(rel_abun_rare), 4)
#8) Plot a rank abundance curve, with rare/abundant fractions identified
#with samples as rows and ASVs as columns
data <- t(M[1:(ncol(M)-6)])
RankAbun.1 <- data.frame(rankabundance(data))
p5 <- ggplot(data=RankAbun.1, aes(x=rank, y=abundance)) +
geom_line(color="black")+
geom_point()+
geom_vline(xintercept = nrow(abun_com), linetype="dotted",
color = "blue", size=1)+
geom_vline(xintercept = nrow(abun_com)+nrow(int_com), linetype="dotted",
color = "red", size=1)+
theme_bw()+
ggtitle(paste0(group, " ", pole," data rank-abundance curve with abundant (blue dotted line) \n and rare (red dotted line) thresholds, as identified through data set-based \n MultiCoLA"))+
geom_text(x=1500, y=10000, label=paste0("Abundant realtive abundance threshold = ", abun_lowest_val*100, "%"))+
geom_text(x=1500, y=9000, label=paste0("Rare realtive abundance threshold = ", rare_highest_val*100, "%"))
pdf(paste0("results/", group, "-", pole, "-rank-abundance-plot.pdf"))
print(p5)
dev.off()
}
rm(data
)
rm(list=ls())
graphics.off()
#load phyloseq object
ps_pro <- readRDS("../../results/16S/phylo-objects/16S-phyloseq-object-rarefied-decontam.rds")
ps_euk <- readRDS("../../results/18S/phylo-objects/18S-phyloseq-object-rarefied.rds")
#16S data
#separate arctic samples
ps_pro_arc <- subset_samples(ps_pro, Pole=="Arctic")
#remove asvs with 0 counts
ps_pro_arc_filter = filter_taxa(ps_pro_arc, function(x) sum(x) >= 1, TRUE)
#separate antarctic samples
ps_pro_ant <- subset_samples(ps_pro, Pole=="Antarctic")
#remove asvs with 0 counts
ps_pro_ant_filter = filter_taxa(ps_pro_ant, function(x) sum(x) >= 1, TRUE)
#18S data
#separate arctic samples
ps_euk_arc <- subset_samples(ps_euk, Pole=="Arctic")
#remove asvs with 0 counts
ps_euk_arc_filter = filter_taxa(ps_euk_arc, function(x) sum(x) >= 1, TRUE)
#separate antarctic samples
ps_euk_ant <- subset_samples(ps_euk, Pole=="Antarctic")
#remove asvs with 0 counts
ps_euk_ant_filter = filter_taxa(ps_euk_ant, function(x) sum(x) >= 1, TRUE)
#Run the function
data_set_based_structure_only_MultiCoLA(ps_pro_arc_filter, "Arctic", "16S")
rm(list=ls())
graphics.off()
data_set_based_structure_only_MultiCoLA <- function(my_phylo, pole, group){
#load packages
library(vegan)
library(MASS)
library(ggplot2)
library(tibble) #to convert rowname to column and vice versa
library(BiodiversityR) #for rank-abundance curves
#source our data prep function
source("solman-MultiCoLA-input-file-prep.R")
#source pre-written MultiCoLA functions from Gobet et al
source("taxa.pooler.1.4.r") #step 2.1
source("COtables.1.4.r") #step 2.2
source("cutoff.impact.1.4.r") #step 2.3
source("cutoff.impact.fig.1.4.r") #step 2.4
source("VP.COL.1.4.r") #step 3.1
source("corrcoeff.ENV.1.4.r") #step 3.2
source("signif.1.4.r") #step 3.3
# 1) Load and prepare data
# I have previously written a function MultiCoLA_input_file_prep() to take a phyloseq object and output data for this analysis.
#prep data
M <- MultiCoLA_input_file_prep(my_phylo)
#2) Obtain a matrix for each taxonomic level (when the taxonomic annotation is available only)
all_taxa_pooled<-taxa.pooler(M)
#3) Apply successive cutoffs on each original matrix
#Gradually remove rare types
# rare.truncated.DS.phylum<-COtables(all_taxa_pooled[[1]], Type="ADS",typem="rare")
# rare.truncated.DS.class<-COtables(all_taxa_pooled[[2]], Type="ADS",typem="rare")
# rare.truncated.DS.order<-COtables(all_taxa_pooled[[3]], Type="ADS",typem="rare")
# rare.truncated.DS.family<-COtables(all_taxa_pooled[[4]], Type="ADS",typem="rare")
# rare.truncated.DS.genus<-COtables(all_taxa_pooled[[5]], Type="ADS",typem="rare")
# rare.truncated.DS.species<-COtables(all_taxa_pooled[[6]], Type="ADS",typem="rare")
# rare.truncated.DS.OTUcompleteDS<-COtables(all_taxa_pooled[[7]], Type="ADS",typem="rare")
# rare.truncated.DS.OTUwholeDS<-COtables(all_taxa_pooled[[8]], Type="ADS",typem="rare")
#Gradually add rare types
# dom.truncated.DS.phylum<-COtables(all_taxa_pooled[[1]], Type="ADS",typem="dominant")
# dom.truncated.DS.class<-COtables(all_taxa_pooled[[2]], Type="ADS",typem="dominant")
# dom.truncated.DS.order<-COtables(all_taxa_pooled[[3]], Type="ADS",typem="dominant")
# dom.truncated.DS.family<-COtables(all_taxa_pooled[[4]], Type="ADS",typem="dominant")
# dom.truncated.DS.genus<-COtables(all_taxa_pooled[[5]], Type="ADS",typem="dominant")
# dom.truncated.DS.species<-COtables(all_taxa_pooled[[6]], Type="ADS",typem="dominant")
# dom.truncated.DS.OTUcompleteDS<-COtables(all_taxa_pooled[[7]], Type="ADS",typem="dominant")
# dom.truncated.DS.OTUwholeDS<-COtables(all_taxa_pooled[[8]], Type="ADS",typem="dominant")
# 4) Calculate Spearman (or Pearson, Kendall) correlations and Procrustes correlations between the original dataset and the truncated ones
rare.corr.all<-cutoff.impact(all_taxa_pooled,Type="ADS",corcoef="spearman",typem="rare")
dom.corr.all<-cutoff.impact(all_taxa_pooled,Type="ADS",corcoef="spearman",typem="dominant")
# 5) Export results table
#Collate results into one dataframe
y1 <- data.frame(rare.corr.all[[1]])
y1$Rank <- "Phylum"
y1$Type <- "Rare"
y2 <- data.frame(rare.corr.all[[2]])
y2$Rank <- "Class"
y2$Type <- "Rare"
y3 <- data.frame(rare.corr.all[[3]])
y3$Rank <- "Order"
y3$Type <- "Rare"
y4 <- data.frame(rare.corr.all[[4]])
y4$Rank <- "Family"
y4$Type <- "Rare"
y5 <- data.frame(rare.corr.all[[5]])
y5$Rank <- "Genus"
y5$Type <- "Rare"
y6 <- data.frame(rare.corr.all[[6]])
y6$Rank <- "Species"
y6$Type <- "Rare"
y7 <- data.frame(rare.corr.all[[7]])
y7$Rank <- "Classified"
y7$Type <- "Rare"
y8 <- data.frame(rare.corr.all[[8]])
y8$Rank <- "Total"
y8$Type <- "Rare"
x1 <- data.frame(dom.corr.all[[1]])
x1$Rank <- "Phylum"
x1$Type <- "Dominant"
x2 <- data.frame(dom.corr.all[[2]])
x2$Rank <- "Class"
x2$Type <- "Dominant"
x3 <- data.frame(dom.corr.all[[3]])
x3$Rank <- "Order"
x3$Type <- "Dominant"
x4 <- data.frame(dom.corr.all[[4]])
x4$Rank <- "Family"
x4$Type <- "Dominant"
x5 <- data.frame(dom.corr.all[[5]])
x5$Rank <- "Genus"
x5$Type <- "Dominant"
x6 <- data.frame(dom.corr.all[[6]])
x6$Rank <- "Species"
x6$Type <- "Dominant"
x7 <- data.frame(dom.corr.all[[7]])
x7$Rank <- "Classified"
x7$Type <- "Dominant"
x8 <- data.frame(dom.corr.all[[8]])
x8$Rank <- "Total"
x8$Type <- "Dominant"
total_results <- rbind(x1,x2,x3, x4, x5, x6, x7, x8, y1, y2, y3, y4, y5, y6, y7, y8)
Truncated <- rownames(x1)
#Add truncated values to rare results
#Subset dataframe
rare <- total_results[total_results$Type == "Rare",]
rare$Truncated = as.numeric(rep(Truncated, 8))
#Add reverse truncated values to dominant results
#Subset dataframe
dom <- total_results[total_results$Type == "Dominant",]
dom$Truncated = as.numeric(rep(rev(Truncated), 8))
#bind the data frames
total_results_rare_dom <- rbind(rare, dom)
#export
write.csv(total_results_rare_dom, paste0("results/", group, "-", pole, "-total-results.csv"))
# 6) Plot results
#Rare Spearman's rank results
#Subset dataframe
rare <- total_results_rare_dom[total_results_rare_dom$Type == "Rare",]
#At what truncation point does the total dataset drop below 0.8 coefficient?
rare_tot <- rare[rare$Rank == "Total",]
rare_tot_trim <- rare_tot[rare_tot$corrcoeff < 0.85,]
rare_tot_value <- as.numeric(rare_tot_trim$Truncated[1])
p1 <- ggplot(rare, aes(x=Truncated, y=corrcoeff, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = rare$Truncated)+
theme_bw()+
geom_vline(xintercept = rare_tot_value, linetype="dotted",
color = "blue", size=1)+
xlab("% Total Rare ASVs Removed")+
ylab("Spearman's Correlation Coefficient")+
ggtitle(paste0(group, " ", pole," data set-based Spearman's correlation coefficients between original\n data set dissimilarity matrix and matrices truncated by increasing removal of \nrare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-spearmans-plot-rare.pdf"))
print(p1)
dev.off()
#Rare Procrustes results
#At what truncation point does the total dataset drop below 0.8 R value?
rare_tot_trim_R <- rare_tot[rare_tot$R.Procrustes < 0.95,]
rare_tot_value_R <- as.numeric(rare_tot_trim_R$Truncated[1])
p2 <- ggplot(rare, aes(x=Truncated, y=R.Procrustes, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = rare$Truncated)+
theme_bw()+
geom_vline(xintercept = rare_tot_value_R, linetype="dotted",
color = "blue", size=1)+
xlab("% Total Rare ASVs Removed")+
ylab("Procrustes R Value")+
ggtitle(paste0(group, " ", pole," data set-based Procrustes R value between original data set\n NMDS and datasets truncated by increasing removal of\n rare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-procrustes-plot-rare.pdf"))
print(p2)
dev.off()
#Dominant Spearman's rank results
dom <- total_results_rare_dom[total_results_rare_dom$Type == "Dominant",]
#At what truncation point does the total dataset drop below 0.8 coefficient?
dom_tot <- dom[dom$Rank == "Total",]
dom_tot_trim <- dom_tot[dom_tot$corrcoeff < 0.8,]
dom_tot_value <- as.numeric(dom_tot_trim$Truncated[1])
p3 <- ggplot(dom, aes(x=Truncated, y=corrcoeff, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = dom$Truncated)+
theme_bw()+
geom_vline(xintercept = dom_tot_value, linetype="dotted",
color = "blue", size=1)+
xlab("% Total Rare ASVs")+
ylab("Spearman's Correlation Coefficient")+
ggtitle(paste0(group, " ", pole," data set-based Spearman's correlation coefficients between original \n data set dissimilarity matrix and matrices with increasing addition of rare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-spearmans-plot-dominant.pdf"))
print(p3)
dev.off()
#Dominant Procrustes results
#At what truncation point does the total dataset drop below 0.8 R value?
dom_tot_trim_R <- dom_tot[dom_tot$R.Procrustes < 0.9,]
dom_tot_value_R <- as.numeric(dom_tot_trim_R$Truncated[1])
p4 <- ggplot(dom, aes(x=Truncated, y=R.Procrustes, group=Rank)) +
geom_line(aes(color=Rank))+
geom_point(aes(color=Rank))+
ylim(0,1)+
scale_x_continuous(breaks = dom$Truncated)+
theme_bw()+
geom_vline(xintercept = dom_tot_value_R, linetype="dotted",
color = "blue", size=1)+
xlab("% ASVs Removed")+
ylab("Procrustes R Value")+
ggtitle(paste0(group, " ", pole," data set-based Procrustes R value between original data set\n NMDS and datasets truncated by increasing addition of rare types"))+
theme(axis.text.x = element_text(angle = 90))
pdf(paste0("results/", group, "-", pole, "-procrustes-plot-dominant.pdf"))
print(p4)
dev.off()
# 7) Defining our subcommunities and cut-offs
#rare community is comprised of the...
rare_community = 1-rare_tot_value
#...% least abundant taxa
#abundant community is comprised of the...
abundant_community = dom_tot_value
#...% most abundant taxa
#What is number of sequences in the rare_community% of total counts
rare_total_counts <- sum(colSums(M[1:(ncol(M)-6)]))*rare_community
#What is number of sequences in the abundant_community% of total counts
abun_total_counts <- sum(colSums(M[1:(ncol(M)-6)]))*abundant_community
#Identify how many ASVs fall into the rare/abundant/intermediate categories according to these results
asv_tab <- data.frame(otu_table(my_phylo))
asv_abun <- data.frame(rowSums(asv_tab))
order_abun <- data.frame(asv_abun[order(-asv_abun$rowSums.asv_tab.), , drop=FALSE])
order_abun_rev <- data.frame(asv_abun[order(asv_abun$rowSums.asv_tab.), , drop=FALSE])
my_counts <- c(0)
for (i in 1:nrow(order_abun)){
my_counts <- c(my_counts, order_abun$rowSums.asv_tab.[i] + my_counts[i])
}
my_counts <-my_counts[-c(1)]
order_abun$Total_Counts <- my_counts
my_counts_2 <- c(0)
for (i in 1:nrow(order_abun_rev)){
my_counts_2 <- c(my_counts_2, order_abun_rev$rowSums.asv_tab.[i] + my_counts_2[i])
}
my_counts_2 <-my_counts_2[-c(1)]
order_abun_rev$Total_Counts <- my_counts_2
#Subset Abundant community
abun_com <- order_abun[order_abun$Total_Counts <= abun_total_counts, ]
#Subset Rare community
rare_com <- order_abun_rev[order_abun_rev$Total_Counts <= rare_total_counts,]
#Subset Intermediate community
int_com <- order_abun[!(row.names(order_abun) %in% row.names(abun_com)),]
int_com <- int_com[!(row.names(int_com) %in% row.names(rare_com)),]
#What percentage relative abundance across the whole dataset does this equate to?
#find the relative abundance of each ASV
rel_abun <- data.frame(rowSums(M[1:(ncol(M)-6)])/sum(rowSums(M[1:(ncol(M)-6)])))
#Within what relative abundance threshold do the abundant community fall?
rel_abun_abundant <- data.frame(rel_abun[row.names(rel_abun) %in% row.names(abun_com),])
abun_lowest_val <- round(min(rel_abun_abundant), 2)
#Within what relative abundance threshold to the rare community fall?
rel_abun_rare <- data.frame(rel_abun[row.names(rel_abun) %in% row.names(rare_com),])
rare_highest_val <- round(max(rel_abun_rare), 4)
#8) Plot a rank abundance curve, with rare/abundant fractions identified
#with samples as rows and ASVs as columns
data <- t(M[1:(ncol(M)-6)])
RankAbun.1 <- data.frame(rankabundance(data))
p5 <- ggplot(data=RankAbun.1, aes(x=rank, y=abundance)) +
geom_line(color="black")+
geom_point()+
geom_vline(xintercept = nrow(abun_com), linetype="dotted",
color = "blue", size=1)+
geom_vline(xintercept = nrow(abun_com)+nrow(int_com), linetype="dotted",
color = "red", size=1)+
theme_bw()+
ggtitle(paste0(group, " ", pole," data rank-abundance curve with abundant (blue dotted line) \n and rare (red dotted line) thresholds, as identified through data set-based \n MultiCoLA"))+
geom_text(x=1500, y=10000, label=paste0("Abundant realtive abundance threshold = ", abun_lowest_val*100, "%"))+
geom_text(x=1500, y=9000, label=paste0("Rare realtive abundance threshold = ", rare_highest_val*100, "%"))
pdf(paste0("results/", group, "-", pole, "-rank-abundance-plot.pdf"))
print(p5)
dev.off()
}
#load phyloseq object
ps_pro <- readRDS("../../results/16S/phylo-objects/16S-phyloseq-object-rarefied-decontam.rds")
ps_euk <- readRDS("../../results/18S/phylo-objects/18S-phyloseq-object-rarefied.rds")
#16S data
#separate arctic samples
ps_pro_arc <- subset_samples(ps_pro, Pole=="Arctic")
#remove asvs with 0 counts
ps_pro_arc_filter = filter_taxa(ps_pro_arc, function(x) sum(x) >= 1, TRUE)
#separate antarctic samples
ps_pro_ant <- subset_samples(ps_pro, Pole=="Antarctic")
#remove asvs with 0 counts
ps_pro_ant_filter = filter_taxa(ps_pro_ant, function(x) sum(x) >= 1, TRUE)
#18S data
#separate arctic samples
ps_euk_arc <- subset_samples(ps_euk, Pole=="Arctic")
#remove asvs with 0 counts
ps_euk_arc_filter = filter_taxa(ps_euk_arc, function(x) sum(x) >= 1, TRUE)
#separate antarctic samples
ps_euk_ant <- subset_samples(ps_euk, Pole=="Antarctic")
#remove asvs with 0 counts
ps_euk_ant_filter = filter_taxa(ps_euk_ant, function(x) sum(x) >= 1, TRUE)
#Run the function
data_set_based_structure_only_MultiCoLA(ps_pro_arc_filter, "Arctic", "16S")
data_set_based_structure_only_MultiCoLA(ps_pro_ant_filter, "Antarctic", "16S")
