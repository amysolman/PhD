text(-1, 0.7, paste0("F= ", as.numeric(round(signif$F[1], digits=4))))
title(main=paste0(community, " CCA"))
#store the plot
# p <- recordPlot()
# plot.new() ## clean up device
# p # redraw
#
# #save the plot
#  pdf(paste0("../../results/16S/graphs/CCA/", community, "-CCA.pdf"))
#  print(p)
dev.off()
}
whats_in_my_model(ps, "Full", "Total")
whats_in_my_model <- function(phylo, type, community){
finalmodel <- rm_collinearity(phylo, type)
#finalmodel
#testing the significance of the model
signif <- anova.cca(finalmodel)
# # Testing the significance of terms (environmental variables):
# anova.cca(finalmodel, by="terms")
# # Testing the significance of CCA axes (at least the first two or three should present a significant p value):
# anova.cca(finalmodel, by="axis")
pdf(paste0("../../results/16S/graphs/CCA/", community, "-", type, "-CCA.pdf"))
#plot the model
#show only species scores
plot(finalmodel, xlim=c(-1.5,2), ylim=c(-1,1.5), display=c("sp","cn","wa"))
text(-1, 1, paste0("p= ", as.numeric(signif$`Pr(>F)`)[1]))
text(-1, 0.7, paste0("F= ", as.numeric(round(signif$F[1], digits=4))))
title(main=paste0(community, " CCA"))
#store the plot
# p <- recordPlot()
# plot.new() ## clean up device
# p # redraw
#
# #save the plot
#  pdf(paste0("../../results/16S/graphs/CCA/", community, "-CCA.pdf"))
#  print(p)
dev.off()
}
whats_in_my_model <- function(phylo, type, community){
finalmodel <- rm_collinearity(phylo, type)
#finalmodel
#testing the significance of the model
signif <- anova.cca(finalmodel)
# # Testing the significance of terms (environmental variables):
# anova.cca(finalmodel, by="terms")
# # Testing the significance of CCA axes (at least the first two or three should present a significant p value):
# anova.cca(finalmodel, by="axis")
pdf(paste0("../../results/16S/graphs/CCA/", community, "-", type, "-CCA.pdf"))
#plot the model
#show only species scores
plot(finalmodel, xlim=c(-1.5,2), ylim=c(-1,1.5), display=c("sp","cn","wa"))
text(-1, 1, paste0("p= ", as.numeric(signif$`Pr(>F)`)[1]))
text(-1, 0.7, paste0("F= ", as.numeric(round(signif$F[1], digits=4))))
title(main=paste0(community, " ", type, " CCA"))
#store the plot
# p <- recordPlot()
# plot.new() ## clean up device
# p # redraw
#
# #save the plot
#  pdf(paste0("../../results/16S/graphs/CCA/", community, "-CCA.pdf"))
#  print(p)
dev.off()
}
whats_in_my_model(ps, "Full", "Total")
whats_in_my_model(ps, "Partial", "Total")
whats_in_my_model(ps.abun, "Full", "Abundant")
whats_in_my_model(ps.abun, "Partial", "Abundant")
whats_in_my_model(ps.int, "Full", "Intermediate")
whats_in_my_model(ps.int, "Partial", "Intermediate")
whats_in_my_model(ps.rare, "Full", "Rare")
whats_in_my_model(ps.rare, "Partial", "Rare")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
graphics.off()
library(vegan) #for diversity indices
library(dplyr) #for coalesce function
library(stringr)
#TOTAL DATASET
ps <- readRDS("../../results/18S/phylo-objects/18S-phyloseq-object-rarefied.rds")
#Total Abundant
ps.abun <- readRDS("../../results/18S/phylo-objects/18S-total-abundant.rds")
#Total Intermediate
ps.int <- readRDS("../../results/18S/phylo-objects/18S-total-intermediate.rds")
#Total Rare
ps.rare <- readRDS("../../results/18S/phylo-objects/18S-total-rare.rds")
count_data <- function(phylo){
spe <- data.frame(t(otu_table(phylo)))
return(spe)
}
# #Test function
# phylo = ps
# res <- count_data(ps)
diversity_and_meta <- function(phylo){
#Get metadata of samples
samp_data <- data.frame(sample_data(phylo))
#list of variables we're interested in
keeps <- c("Distance_To_Sea", "Elevation", "Water_Depth", "Sediment_Depth", "Total_Depth","Conductivity", "pH", "DOC_mgL.1",
"Cl_merge", "SO4_merge", "Na_merge", "K_merge", "Mg_merge","Ca_merge", "HCO3_merge", "Radius", "EW", "NS")
samp_data <- samp_data[ , (names(samp_data) %in% keeps)]
#get cryoconite hole areas
area1 <- pi*samp_data$Radius^2
area2 <- pi*(samp_data$NS/2)*(samp_data$EW/2)
samp_data$Area <- coalesce(area1,area2)
# diversity_index <- estimate_richness(phylo)
# #Merge into datafrome
# samp_data$Observed <- diversity_index$Observed
# samp_data$Shannon <- diversity_index$Shannon
drops <- c("EW", "NS", "Radius")
samp_data <- samp_data[ , !(names(samp_data) %in% drops)]
#make sure data are numeric
samp_data[1:16] <- data.frame(lapply(samp_data[1:16],as.numeric))
#change sample names
names(samp_data) <- c("Distance_To_Sea", "Elevation", "Water_Depth", "Sediment_Depth", "Total_Depth","Conductivity", "pH", "DOC_mgL.1", "Cl", "SO4", "Na", "K", "Mg","Ca", "HCO3", "Area")
#remove columns with more than 50% missing variables
samp_data_trim <- samp_data[ lapply( samp_data, function(x) sum(is.na(x)) / length(x) ) < 0.5 ]
#Only keep complete cases
samp_data_trim_complete <- samp_data_trim[complete.cases(samp_data_trim),]
return(samp_data_trim_complete)
}
#Test function
# phylo = ps
# res <- diversity_and_meta(ps)
get_my_long_lat <- function(phylo){
#get metadata
meta <- data.frame(sample_data(phylo))
#put a negative sign in front of all the south latitude coords
for (i in 1:nrow(meta)){
if (meta$Pole[i] == "Antarctic"){
meta$Glacier_Latitude[i] <- c(paste0("-", meta$Glacier_Latitude[i]))
meta$Cryoconite_Latitude[i] <- c(paste0("-", meta$Cryoconite_Latitude[i]))
}
}
#Some of our cryoconite holes don't have specific coords so we'll use the glacier coordinates
#remove letters from glacier coord strings
meta$Glacier_Latitude <- as.numeric(str_sub(meta$Glacier_Latitude,1,nchar(meta$Glacier_Latitude)-1))
meta$Glacier_Longitude <- as.numeric(str_sub(meta$Glacier_Longitude,1,nchar(meta$Glacier_Longitude)-1))
glac_lat <- meta$Glacier_Latitude
glac_long <- meta$Glacier_Longitude
#get latitude of each sample
cryo_lat <- as.numeric(meta$Cryoconite_Latitude)
#get longitude of each sample
cryo_long <- as.numeric(meta$Cryoconite_Longitude)
#replace any missing cryoconite coords with those of it's glacier
for (j in 1:length(cryo_lat)){
if (is.na(cryo_lat[j])){
cryo_lat[j] <- glac_lat[j]
cryo_long[j] <- glac_long[j]
}
}
#put into matrix
long.lat <- as.data.frame(cbind(cryo_long, cryo_lat))
rownames(long.lat) = rownames(meta)
return(long.lat)
}
# #Test function
# phylo = ps
# res <- get_my_long_lat(ps)
get_my_CCA <- function(phylo, type){
spe = count_data(phylo)
env = diversity_and_meta(phylo)
spatial = get_my_long_lat(phylo)
#trim species counts and spatial data to match environmental data
spe_trim <- spe[(rownames(spe) %in% rownames(env)),]
spatial_trim <- spatial[(rownames(spatial) %in% rownames(env)),]
if (type == "Full"){
ccamodel <- cca(spe_trim~., env)
} else if (type == "Partial"){
envspatial<-cbind(env,spatial_trim)
nams <- names(envspatial)
partialccamodel <- formula(paste("spe_trim ~", paste(nams[1: (length(envspatial)-(length(spatial_trim)) )], collapse = " + "),"+ Condition(", paste(nams[(length(envspatial)-(length(spatial_trim)-1) ):length(envspatial)], collapse ="+"),")"))
ccamodel<-cca(partialccamodel, envspatial)
}
#use ordistep to select the variables that best explain variation in the community
finalmodel<- ordistep(ccamodel, scope=formula(ccamodel))
return(finalmodel)
}
#Test function
# type = "Full"
# phylo = ps
#model_res <- get_my_CCA(ps, "Partial")
rm_collinearity <- function(phylo, type){
#initial CCA
model <- get_my_CCA(phylo, type)
#Get VIF
vif <- as.data.frame(vif.cca(model))
#create a vector for keeping our non-collinearity variables
env_to_keep <- vector()
for (i in 1:nrow(vif)){
if(vif$`vif.cca(model)`[i] < 10){
env_to_keep <- c(env_to_keep, rownames(vif)[i])
}
}
spe = count_data(phylo)
env = diversity_and_meta(phylo)
spatial = get_my_long_lat(phylo)
if (type == "Full"){
#only keep the good variables in our env dataframe
env_trim <- as.data.frame(env[ , (names(env) %in% env_to_keep)])
#get column names
names(env_trim) <- env_to_keep
rownames(env_trim) <- rownames(env)
} else if (type == "Partial"){
env_to_keep_df <- as.data.frame(env_to_keep)
env_to_keep <- env_to_keep_df %>%
filter(!str_detect(env_to_keep, "cryo"))
env_to_keep <- as.vector(env_to_keep$env_to_keep)
#only keep the good variables in our env dataframe
env_trim <- as.data.frame(env[ , (names(env) %in% env_to_keep)])
#get column names
names(env_trim) <- env_to_keep
rownames(env_trim) <- rownames(env)
}
#trim species counts and spatial data to match environmental data
spe_trim <- spe[(rownames(spe) %in% rownames(env_trim)),]
spatial_trim <- spatial[(rownames(spatial) %in% rownames(env_trim)),]
if (type == "Full"){
ccamodel <- cca(spe_trim~., env_trim)
} else if (type == "Partial"){
envspatial<-cbind(env_trim,spatial_trim)
nams <- names(envspatial)
partialccamodel <- formula(paste("spe_trim ~", paste(nams[1: (length(envspatial)-(length(spatial_trim)) )], collapse = " + "),"+ Condition(", paste(nams[(length(envspatial)-(length(spatial_trim)-1) ):length(envspatial)], collapse ="+"),")"))
ccamodel<-cca(partialccamodel, envspatial)
}
#use ordistep to select the variables that best explain variation in the community
finalmodel<- ordistep(ccamodel, scope=formula(ccamodel))
return(finalmodel)
}
#Test function
# type = "Partial"
# phylo = ps
# model_res1 <- rm_collinearity(ps, "Full")
# model_res2 <- rm_collinearity(ps, "Partial")
whats_in_my_model <- function(phylo, type, community){
finalmodel <- rm_collinearity(phylo, type)
#finalmodel
#testing the significance of the model
signif <- anova.cca(finalmodel)
# # Testing the significance of terms (environmental variables):
# anova.cca(finalmodel, by="terms")
# # Testing the significance of CCA axes (at least the first two or three should present a significant p value):
# anova.cca(finalmodel, by="axis")
pdf(paste0("../../results/18S/graphs/CCA/", community, "-", type, "-CCA.pdf"))
#plot the model
#show only species scores
plot(finalmodel, xlim=c(-1.5,2), ylim=c(-1,1.5), display=c("sp","cn","wa"))
text(-1, 1, paste0("p= ", as.numeric(signif$`Pr(>F)`)[1]))
text(-1, 0.7, paste0("F= ", as.numeric(round(signif$F[1], digits=4))))
title(main=paste0(community, " ", type, " CCA"))
#store the plot
# p <- recordPlot()
# plot.new() ## clean up device
# p # redraw
#
# #save the plot
#  pdf(paste0("../../results/18S/graphs/CCA/", community, "-CCA.pdf"))
#  print(p)
dev.off()
}
#Test function
# type = "Full"
# phylo = ps
# community = "Total"
#whats_in_my_model(ps, "Full", "Total")
whats_in_my_model(ps, "Full", "Total")
whats_in_my_model(ps, "Partial", "Total")
whats_in_my_model(ps.abun, "Full", "Abundant")
whats_in_my_model(ps.abun, "Partial", "Abundant")
whats_in_my_model(ps.int, "Full", "Intermediate")
whats_in_my_model(ps.int, "Partial", "Intermediate")
whats_in_my_model(ps.rare, "Full", "Rare")
whats_in_my_model(ps.rare, "Partial", "Rare")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
graphics.off()
# library(ggpubr) #for making my boxplots
# library(FSA) #for dunn's test
# library(vegan) #for diversity indices
# library(ggplot2) #for making plots
# library(dplyr) #for manipulating data where you see %>% and computing summary stats
# install.packages("dendextend")
# library(dendextend) #for hierchical clustering
# install.packages("indicspecies")
# library(indicspecies) #for indicator species analysis
# library(stringr) #for removing characters from string
# library(fossil) #for creating distance matrix
# # install.packages("betapart")
# library(betapart) #for didtance decay analysis
# library(ade4) #mantel tests
# library(data.table)
# Enable the r-universe repo
# options(repos = c(
#     fawda123 = 'https://fawda123.r-universe.dev',
#     CRAN = 'https://cloud.r-project.org'))
#
# # Install ggord
# install.packages('ggord')
# library(ggord)
# library(car) #function for multicollinearity
#TOTAL DATASET
ps <- readRDS("../../results/16S/phylo-objects/16S-phyloseq-object-rarefied-decontam.rds")
#Total Abundant
ps.abun <- readRDS("../../results/16S/phylo-objects/16S-total-abundant.rds")
#Total Intermediate
ps.int <- readRDS("../../results/16S/phylo-objects/16S-total-intermediate.rds")
#Total Rare
ps.rare <- readRDS("../../results/16S/phylo-objects/16S-total-rare.rds")
diversity_and_meta <- function(phylo){
#Get metadata of samples
samp_data <- data.frame(sample_data(phylo))
#list of variables we're interested in
keeps <- c("Distance_To_Sea", "Elevation", "Water_Depth", "Sediment_Depth", "Total_Depth","Conductivity", "pH", "DOC_mgL.1",
"Cl_merge", "SO4_merge", "Na_merge", "K_merge", "Mg_merge","Ca_merge", "HCO3_merge", "Radius", "EW", "NS")
samp_data <- samp_data[ , (names(samp_data) %in% keeps)]
#get cryoconite hole areas
area1 <- pi*samp_data$Radius^2
area2 <- pi*(samp_data$NS/2)*(samp_data$EW/2)
samp_data$Area <- coalesce(area1,area2)
# diversity_index <- estimate_richness(phylo)
# #Merge into datafrome
# samp_data$Observed <- diversity_index$Observed
# samp_data$Shannon <- diversity_index$Shannon
drops <- c("EW", "NS", "Radius")
samp_data <- samp_data[ , !(names(samp_data) %in% drops)]
#make sure data are numeric
samp_data[1:16] <- data.frame(lapply(samp_data[1:16],as.numeric))
#change sample names
names(samp_data) <- c("Distance_To_Sea", "Elevation", "Water_Depth", "Sediment_Depth", "Total_Depth","Conductivity", "pH", "DOC_mgL.1", "Cl", "SO4", "Na", "K", "Mg","Ca", "HCO3", "Area")
#remove columns with more than 50% missing variables
samp_data_trim <- samp_data[ lapply( samp_data, function(x) sum(is.na(x)) / length(x) ) < 0.5 ]
#Only keep complete cases
samp_data_trim_complete <- samp_data_trim[complete.cases(samp_data_trim),]
return(samp_data_trim_complete)
}
#Test function
# phylo = ps
# res <- diversity_and_meta(ps)
spe <- data.frame(t(otu_table(phylo)))
phylo = ps
level = "Class"
spe <- data.frame(t(otu_table(phylo)))
#get out taxonomy table
tax_tab <- data.frame(tax_table(phylo))
#replace NAs with Unknown
tax_tab[is.na(tax_tab)] <- "Unknown"
head(tax_tab[, level])
View(tax_tab)
level = "Phylum"
colnames(spe) <- tax_tab[, level]
View(spe)
#aggregate count data
x <- t(spe)
new_df=aggregate(x, by=list(rownames(x)),sum)
new_counts <- t(new_df)
colnames(new_counts) <- new_counts[1,]
new_counts <- new_counts[-1,]
df <- data.frame(new_counts)
#make dataframe numeric
df[] <- lapply(df, as.numeric)
View(df)
agg_my_counts <- function(phylo, level){
spe <- data.frame(t(otu_table(phylo)))
#get out taxonomy table
tax_tab <- data.frame(tax_table(phylo))
#replace NAs with Unknown
tax_tab[is.na(tax_tab)] <- "Unknown"
colnames(spe) <- tax_tab[, level]
#aggregate count data
x <- t(spe)
new_df=aggregate(x, by=list(rownames(x)),sum)
new_counts <- t(new_df)
colnames(new_counts) <- new_counts[1,]
new_counts <- new_counts[-1,]
df <- data.frame(new_counts)
#make dataframe numeric
df[] <- lapply(df, as.numeric)
return(df)
}
df1 <- agg_my_counts(ps, "Phylum")
phylo_new = tax_glom(phylo, level)
df <- data.frame(t(otu_table(phylo_new)))
View(df)
View(df1)
View(df)
View(df1)
View(df)
colSums(df)
colSums(df1)
agg_my_counts <- function(phylo, level){
spe <- data.frame(t(otu_table(phylo)))
#get out taxonomy table
tax_tab <- data.frame(tax_table(phylo))
#replace NAs with Unknown
tax_tab[is.na(tax_tab)] <- "Unknown"
colnames(spe) <- tax_tab[, level]
#aggregate count data
x <- t(spe)
new_df=aggregate(x, by=list(rownames(x)),sum)
new_counts <- t(new_df)
colnames(new_counts) <- new_counts[1,]
new_counts <- new_counts[-1,]
df <- data.frame(new_counts)
#make dataframe numeric
df[] <- lapply(df, as.numeric)
df <- df[,! names(df) %in% c("Unknown")]
return(df)
}
df1 <- agg_my_counts(ps, "Phylum")
View(df1)
phylo = ps
level = "Phylum"
meta <- diversity_and_meta(phylo)
df <- agg_my_counts(phylo, level)
df <- agg_my_counts(phylo, level)
rda_res = rda(df ~ . , data=meta_med, na.action = na.excl
e)
rda_res = rda(df ~ . , data=meta, na.action = na.exclude)
View(df)
View(meta)
#trim df to have the same samples as meta
df_trim <- df[(rownames(df) %in% rownames(meta)),]
rda_res = rda(df_trim ~ . , data=meta, na.action = na.exclude)
rda_res
RsquareAdj(rda_tree)
RsquareAdj(rda_res)
summary(rda_res)
#stepwise selection of variables
RDA1<-rda(df_trim~1,meta)
RDA2<-rda(df_trim~.,meta)
step.forward<-ordistep(RDA1,scope=formula(RDA2), direction="forward",perm.max=200,pstep=999)
?ordistep
step.forward
#Plot
#plot a graph of results
plot(RDA_res, display=c("sp", "cn"), scaling=0, main="Total Taxa RDA Plot")
#Plot
#plot a graph of results
plot(rda_res, display=c("sp", "cn"), scaling=0, main="Total Taxa RDA Plot")
summary(rda_res)
rda_res
plot(rda_res, type='n', scaling=1)
orditorp(rda_res, display='sp', cex=0.5, scaling=1, col='blue')
text(rda_res, display='cn', col='red')
plot(rda_res, type='n', scaling=1)
orditorp(rda_res, display='sp', cex=0.5, scaling=1, col='blue')
#Plot
#plot a graph of results
plot(rda_res, display=c("sp", "cn"), scaling=0, main="Total Taxa RDA Plot")
plot(rda_res, display=c("sp", "cn"), scaling=0, main="Total Taxa RDA Plot")
text(-0.75, 0.3, paste0("F= ", RsquareAdj(rda_res)[2]))
plot(rda_res, display=c("sp", "cn"), scaling=0, main="Total Taxa RDA Plot")
text(-0.75, 0.3, paste0("F= ", round(RsquareAdj(rda_res)[2],digits=3)))
plot(rda_res, display=c("sp", "cn"), scaling=0, main="Total Taxa RDA Plot")
text(-0.75, 0.3, paste0("F= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
plot(rda_res, display=c("sp", "cn"), scaling=0, main="Total Taxa RDA Plot")
text(-0.75, 0.3, paste0("AdjR= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
#Find variance inflation ratios
vif.cca(RDA_res) #all vif < 10
#Find variance inflation ratios
vif.cca(rda_res) #all vif < 10
run_my_rda <- function(phylo, level, community){
meta <- diversity_and_meta(phylo)
df <- agg_my_counts(phylo, level)
#trim df to have the same samples as meta
df_trim <- df[(rownames(df) %in% rownames(meta)),]
rda_res = rda(df_trim ~ . , data=meta, na.action = na.exclude)
rda_res
#Plot
#plot a graph of results
pdf(paste0("../../results/16S/graphs/RDA/", community, "-RDA.pdf"))
plot(rda_res, display=c("sp", "cn"), scaling=0, main=paste0(community, " RDA"))
text(-0.75, 0.3, paste0("AdjR= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
dev.off()
}
phylo = ps
level = "Phylum"
community = "Total"
meta <- diversity_and_meta(phylo)
df <- agg_my_counts(phylo, level)
#trim df to have the same samples as meta
df_trim <- df[(rownames(df) %in% rownames(meta)),]
rda_res = rda(df_trim ~ . , data=meta, na.action = na.exclude)
rda_res
pdf(paste0("../../results/16S/graphs/RDA/", community, "-RDA.pdf"))
plot(rda_res, display=c("sp", "cn"), scaling=0, main=paste0(community, " RDA"))
text(-0.75, 0.3, paste0("AdjR= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
dev.off()
pdf(paste0("../../results/16S/graphs/RDA/", community, "-RDA.pdf"))
plot(rda_res, display=c("sp", "cn"), scaling=0, main=paste0(community, " RDA"))
text(-0.4, 0.2, paste0("AdjR= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
dev.off()
pdf(paste0("../../results/16S/graphs/RDA/", community, "-RDA.pdf"))
plot(rda_res, display=c("sp", "cn"), scaling=0, main=paste0(community, " RDA"))
text(-0.4, 0.3, paste0("AdjR= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
dev.off()
run_my_rda(ps, "Phylum", "Total")
run_my_rda(ps.abun, "Phylum", "Abundant")
run_my_rda(ps.int, "Phylum", "Intermediate")
run_my_rda(ps.rare, "Phylum", "Rare")
phylo = ps
level = "Phylum"
community = "Total"
meta <- diversity_and_meta(phylo)
df <- agg_my_counts(phylo, level)
#trim df to have the same samples as meta
df_trim <- df[(rownames(df) %in% rownames(meta)),]
rda_res = rda(df_trim ~ . , data=meta, na.action = na.exclude)
pdf(paste0("../../results/16S/graphs/RDA/", community, "-RDA.pdf"))
plot(rda_res, display=c("sp", "cn"), scaling=0, main=paste0(community, " RDA AdjR= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
#text(-0.4, 0.3, paste0("AdjR= ", round(as.numeric(RsquareAdj(rda_res)[2]),digits=3)))
dev.off()
