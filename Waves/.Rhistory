#get our data
data <-
ps2 %>%
tax_glom("Genus") %>%
psmelt() %>%
as_tibble()
#get 3 most abundant genus by phylum
out = data %>%
filter(Phylum %in% phy.keep) %>%
group_by(Phylum, Genus) %>%
dplyr::summarise(Abundance = mean(Abundance)) %>%
arrange(-Abundance)%>%
top_n(n = 3)
#get colours for plotting
col.list = c("orange", "darkorange4",
"blue", "darkblue",
"tan", "tan4",
"turquoise", "turquoise4",
"red", "darkred",
"antiquewhite", "antiquewhite4",
"green", "darkgreen",
"darkgoldenrod1", "darkgoldenrod4",
"violetred1", "violetred4",
"cyan", "cyan4",
"yellow", "yellow4",
"pink", "deeppink4",
"purple","darkorchid4",
"coral", "coral4",
"aquamarine", "aquamarine4",
"brown1", "brown4",
"darkolivegreen1", "darkolivegreen",
"chocolate", "chocolate4",
"deepskyblue", "deepskyblue4")
#sort the out dataframe and add colours
out.col = out[with(out, order(Phylum)), ]
out.col$Genus = paste0(out.col$Phylum, ": ", out.col$Genus)
num4cols = 1
save.cols <- vector()
df2keep = data.frame(Phylum=as.character(), Genus=as.character(), Abundance=as.numeric())
for (i in 1:length(unique(out.col$Phylum))){ #for each unique phyla
#get our phyla data only
mini.df = out.col[out.col$Phylum == unique(out.col$Phylum)[i],]
#get colour function for that phylum
cols = colorRampPalette(c(col.list[num4cols], col.list[num4cols+1]))
#get colours for each genus
save.cols = c(save.cols, cols(nrow(mini.df)+1))
#add nums for moving along our colour list
num4cols = num4cols + 2
df1 = rbind(mini.df, data.frame(Phylum=unique(out.col$Phylum)[i], Genus=paste0(unique(out.col$Phylum)[i], ": Other")))
df2keep = rbind(df2keep, df1)
}
#out phya and genera to plot with their assigned colours
df2keep$col = save.cols
#save data as data2plot for additional wrangling
data2plot = data
#remove unwanted genera and replace with other
for (i in 1:nrow(data2plot)){
if(!data2plot$Genus[i] %in% out$Genus){
data2plot$Genus[i] <- paste0(data2plot$Phylum[i], ": Other")
} else if (data2plot$Genus[i] %in% out$Genus){
data2plot$Genus[i] <- paste0(data2plot$Phylum[i], ": ", data2plot$Genus[i])
}
}
#remove unwanted phyla
for (i in 1:nrow(data2plot)){
if(!data2plot$Phylum[i] %in% unique(out$Phylum)){
data2plot$Genus[i] <- "Other"
}
}
#add those colours to the corresponding row in our main dataframe
#add "Other" to out.col
out.col2 = rbind(df2keep, data.frame(Phylum="Other", Genus="Other", col="#000000"))
data2plot2 = merge(data2plot, out.col2[, c("Genus", "col")], by="Genus")
#plot data
df = data2plot2
if (controls == TRUE){
df$SampleType <- factor(df$SampleType, levels = c("Interface", "Meltwater", "Surface", "Control"))
df$Site <- factor(df$Site, levels = c("A", "D", "G"))
} else {
df$SampleType <- factor(df$SampleType, levels = c("Interface", "Meltwater", "Surface"))
df$Site <- factor(df$Site, levels = c("A", "D"))
}
df$Day <- factor(df$Day, levels = c("1", "2", "3"))
#sort dataframe according to phylum
df.plot = df[with(df, order(Phylum)), ]
#set phylum as factor
levs = unique(df.plot$Phylum)
levs = levs[levs != "Other"]
df.plot$Phylum <- factor(df.plot$Phylum, levels = c(levs, "Other"))
#set Genus as factors to keep their order when plotting
#sort dataframe according to phylum
gen.df = out.col2[with(out.col2, order(Genus)), ]
levs = gen.df$Genus
levs = levs[levs != "Other"]
df.plot$Genus <- factor(df.plot$Genus, levels = out.col2$Genus)
#sort out colours
col <- as.character(df.plot$col)
names(col) <- as.character(df.plot$Genus)
df.plot2 =
df.plot %>%
group_by(Genus, SampleType, Sample) %>%
dplyr::summarise(across(c(Abundance), sum))
p1 = ggplot(df.plot2, aes(fill=Genus, y=Abundance, x=Sample)) +
geom_bar(position="fill", stat="identity", alpha=1)+
facet_grid(cols = vars(SampleType), scales = "free", space = "free", labeller = label_wrap_gen(width=10))+
ylab("Relative Abundance")+
theme_bw()+
scale_fill_manual(values = col)+
guides(fill=guide_legend(ncol=5, byrow=FALSE))+
theme(legend.position="bottom",
axis.text.x = element_text(angle = 45, vjust = 0.5, size=15),
axis.text.y = element_text(size=15),
legend.title=element_blank(),
strip.text = element_text(
size = 20))
p1
pdf(paste0("../results/", data_name, "-community-plot.pdf"), width=w, height=h)
print(p1)
dev.off()
#save colours
#write.csv(gen.df, paste0("../results/", data, "-colours-for-plotting-rare.csv"))
return(p1)
}
p1 = bar_chart_func(ps = ps.pro, controls = FALSE, data_name = "16S", w = 15, h = 10)
p2 = bar_chart_func(ps = ps.euk, controls = TRUE, data_name = "18S", w = 20, h = 10)
p2a = bar_chart_func(ps = ps.euk.rm, controls = TRUE, data_name = "18S-rm", w = 20, h = 10)
###PUT THE TWO PLOTS TOGETHER
p3 = p1 / p2 + plot_annotation(tag_levels = 'A') &
theme(plot.tag = element_text(size = 25))
p3
pdf("../results/all-community-plot.pdf", width=18, height=20)
print(p3)
dev.off()
p4 = p1 / p2a + plot_annotation(tag_levels = 'A') &
theme(plot.tag = element_text(size = 25))
p4
pdf("../results/all-community-plot-euk-rm.pdf", width=18, height=20)
print(p4)
dev.off()
euk.c = subset_samples(ps.euk, SampleType == "Control")
euk.c = filter_taxa(euk.c, function(x) sum(x) > 0, TRUE)
euk.c
ps.pro
#number of ASVs after removing blanks
ps.euk.no.blank = subset_samples(ps.euk, SampleType != "Control")
ps.euk.no.blank = filter_taxa(ps.euk.no.blank, function(x) sum(x) > 0, TRUE)
ps.euk.no.blank
sub = subset_samples(ps.pro, SampleType == "Interface")
glom <- tax_glom(sub, taxrank = 'Phylum')
t.glom = data.frame(otu_table(glom))
rownames(t.glom) = data.frame(tax_table(glom))$Phylum
sort(rowSums(t.glom))/sum(t.glom)
#16S meltwater
sub = subset_samples(ps.pro, SampleType == "Meltwater")
glom <- tax_glom(sub, taxrank = 'Phylum')
t.glom = data.frame(otu_table(glom))
rownames(t.glom) = data.frame(tax_table(glom))$Phylum
sort(rowSums(t.glom))/sum(t.glom)
#16S surface
sub = subset_samples(ps.pro, SampleType == "Surface")
glom <- tax_glom(sub, taxrank = 'Phylum')
t.glom = data.frame(otu_table(glom))
rownames(t.glom) = data.frame(tax_table(glom))$Phylum
sort(rowSums(t.glom))/sum(t.glom)
sub = subset_samples(ps.euk.no.blank, SampleType == "Interface")
glom <- tax_glom(sub, taxrank = 'Phylum')
t.glom = data.frame(otu_table(glom))
rownames(t.glom) = data.frame(tax_table(glom))$Phylum
sort(rowSums(t.glom))/sum(t.glom)
source("~/Documents/PhD/waves22/code/community-profiles.R")
source("~/Documents/PhD/waves22/code/community-profiles.R")
source("~/Documents/PhD/waves22/code/unconstrained-ordination.R")
rm(list=ls())
graphics.off()
library(ggplot2)
library(phyloseq)
# library(patchwork)
# library(ggpubr)
# library(glue)
# library(tibble) # for add_column
# library(reshape2)
# library(cowplot)
# library(betapart)
# library(dplyr)
# 2. Import data
ps.pro <- readRDS("../data/16S-phylo-object-rel.rds")
ps.euk <- readRDS("../data/18S-phylo-object-rel.rds")
#remove blanks
ps.euk = subset_samples(ps.euk, SampleType != "Control")
ps.euk = filter_taxa(ps.euk, function(x) sum(x) > 0, TRUE)
#remove the 2 most abundant taxa from ps.euk
#which ASVs have the most counts?
tax = data.frame(tax_table(ps.euk))
x = data.frame(sort(taxa_sums(ps.euk), decreasing = FALSE))
names(x) = "value"
y = x %>%
top_n(2, value)
z = tax[rownames(tax) %in% rownames(y),]
allTaxa = taxa_names(ps.euk)
allTaxa <- allTaxa[!(allTaxa %in% rownames(z))]
ps.euk.rm = prune_taxa(allTaxa, ps.euk)
ps = ps.pro
dis = phyloseq::distance(ps, "bray")
dis.m = melt(as.matrix(dis))
View(dis.m)
dis.m = dis.m %>%
filter(as.character(Var1) != as.character(Var2)) %>%
mutate_if(is.factor, as.character)
sd = data.frame(sample_data(ps))
sd = sd %>%
select("SampleID", "SampleType") %>%
mutate_if(is.factor,as.character)
View(sd)
colnames(sd) = c("Var1", "Type1")
dis.sd = left_join(dis.m, sd, by = "Var1")
View(dis.sd)
colnames(sd) = c("Var2", "Type2")
dis.sd = left_join(dis.sd, sd, by = "Var2")
p = ggplot(dis.sd, aes(x = Type2, y = value)) +
theme_bw() +
geom_point() +
geom_boxplot(aes(color = ifelse(Type1 == Type2, "red", "black" ))) +
scale_color_identity() +
facet_wrap(~ Type1, scales = "free_x") +
theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle(paste0("Distance Metric = ", "bray")) +
ylab("bray") +
xlab("type")
p
p = ggplot(dis.sd, aes(x = Type2, y = value)) +
theme_bw() +
geom_point() +
geom_boxplot(aes(color = ifelse(Type1 == Type2, "red", "black" ))) +
scale_color_identity() +
#facet_wrap(~ Type1, scales = "free_x") +
theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle(paste0("Distance Metric = ", "bray")) +
ylab("bray") +
xlab("type")
p
#get bray-curtis distance matrix and melt
dis <- phyloseq::distance(ps, method = "bray")
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Beta")
View(dis.melt)
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
View(df)
#get sample data
sd = data.frame(sample_data(ps))
sd = sd %>%
select("SampleID", "SampleType") %>%
mutate_if(is.factor,as.character)
View(sd)
View(dis.melt)
colnames(sd) = c("Sample1", "Type1")
df = left_join(df, sd, by = "Sample1")
View(df)
colnames(sd) = c("Sample2", "Type2")
df = left_join(df, sd, by = "Sample2")
View(df)
#only keep rows where samples from the same type are compared
final.df = df %>%
filter(str_sub(Type1) != (str_sub(Type2)))
View(final.df)
#only keep rows where samples from the same type are compared
final.df = df %>%
filter(str_sub(Type1) == (str_sub(Type2)))
View(final.df)
p = ggplot(final.df, aes(x = Type1, y = Beta)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("bray") +
xlab("type")
p
p = ggplot(final.df, aes(x = Type1, y = Beta, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ylab("bray") +
xlab("type")
p
p = ggplot(final.df, aes(x = Type1, y = Beta, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "none") +
ylab("bray") +
xlab("type")
p
p = ggplot(final.df, aes(x = Type1, y = Beta, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(axis.text.x=element_text(angle = 45, hjust = 1, vjust = 0.5),
legend.position = "none") +
ylab("bray") +
xlab("type")
p
p = ggplot(final.df, aes(x = Type1, y = Beta, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(axis.text.x=element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
ylab("bray") +
xlab("type")
p
ps = ps.pro
d = "wunifrac"
lab="Weighted Unifrac Distances"
#get distance matrix and melt
dis <- phyloseq::distance(ps, method = d)
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Dis")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
#get sample data
sd = data.frame(sample_data(ps))
sd = sd %>%
select("SampleID", "SampleType") %>%
mutate_if(is.factor,as.character)
colnames(sd) = c("Sample1", "Type1")
df = left_join(df, sd, by = "Sample1")
colnames(sd) = c("Sample2", "Type2")
df = left_join(df, sd, by = "Sample2")
#only keep rows where samples from the same type are compared
final.df = df %>%
filter(str_sub(Type1) == (str_sub(Type2)))
#plot
p = ggplot(final.df, aes(x = Type1, y = Dis, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(axis.text.x=element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
ylab(lab) +
xlab("Sample Type")
p
beta_function <- function(ps, d, lab){
#get distance matrix and melt
dis <- phyloseq::distance(ps, method = d)
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Dis")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
#get sample data
sd = data.frame(sample_data(ps))
sd = sd %>%
select("SampleID", "SampleType") %>%
mutate_if(is.factor,as.character)
colnames(sd) = c("Sample1", "Type1")
df = left_join(df, sd, by = "Sample1")
colnames(sd) = c("Sample2", "Type2")
df = left_join(df, sd, by = "Sample2")
#only keep rows where samples from the same type are compared
final.df = df %>%
filter(str_sub(Type1) == (str_sub(Type2)))
#plot
p = ggplot(final.df, aes(x = Type1, y = Dis, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(axis.text.x=element_text(angle = 45, hjust = 1, vjust = 1),
legend.position = "none") +
ylab(lab) +
xlab("Sample Type")
p
return(p)
}
euk.p = beta_function(ps.euk, "wunifrac", "Weighted Unifrac Distances")
euk.p
beta_function <- function(ps, d, lab){
#get distance matrix and melt
dis <- phyloseq::distance(ps, method = d)
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Dis")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
#get sample data
sd = data.frame(sample_data(ps))
sd = sd %>%
select("SampleID", "SampleType") %>%
mutate_if(is.factor,as.character)
colnames(sd) = c("Sample1", "Type1")
df = left_join(df, sd, by = "Sample1")
colnames(sd) = c("Sample2", "Type2")
df = left_join(df, sd, by = "Sample2")
#only keep rows where samples from the same type are compared
final.df = df %>%
filter(str_sub(Type1) == (str_sub(Type2)))
#plot
p = ggplot(final.df, aes(x = Type1, y = Dis, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
theme(legend.position = "none") +
ylab(lab) +
xlab("Sample Type")
p
return(p)
}
euk.p = beta_function(ps.euk, "wunifrac", "Weighted Unifrac Distances")
euk.p
euk.p.rm = beta_function(ps.euk.rm, "wunifrac", "Weighted Unifrac Distances")
euk.p.rm
pdf("../results/wunifrac-boxplots.pdf", height=8, width=10)
print(euk.p)
dev.off()
source("~/Documents/PhD/waves22/code/beta-diversity.R")
source("~/Documents/PhD/waves22/code/beta-diversity.R")
my_comparisons <- list( c("Interface", "Meltwater"), c("Interface", "Surface"), c("Surface", "Meltwater") )
p = ggplot(final.df, aes(x = Type1, y = Dis, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
stat_compare_means(comparisons = my_comparisons)+
theme(legend.position = "none",
axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15),
axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20)) +
ylab(lab) +
xlab("Sample Type")
beta_function <- function(ps, d, lab){
#get distance matrix and melt
dis <- phyloseq::distance(ps, method = d)
dis.melt = melt(as.matrix(dis))
names(dis.melt) = c("Sample1", "Sample2", "Dis")
#remove samples being compared to themseves
df = dis.melt[dis.melt['Sample1'] != dis.melt['Sample2'],]
#get sample data
sd = data.frame(sample_data(ps))
sd = sd %>%
select("SampleID", "SampleType") %>%
mutate_if(is.factor,as.character)
colnames(sd) = c("Sample1", "Type1")
df = left_join(df, sd, by = "Sample1")
colnames(sd) = c("Sample2", "Type2")
df = left_join(df, sd, by = "Sample2")
#only keep rows where samples from the same type are compared
final.df = df %>%
filter(str_sub(Type1) == (str_sub(Type2)))
#plot
my_comparisons <- list( c("Interface", "Meltwater"), c("Interface", "Surface"), c("Surface", "Meltwater") )
p = ggplot(final.df, aes(x = Type1, y = Dis, fill=Type1)) +
theme_bw() +
geom_boxplot() +
scale_color_identity() +
stat_compare_means(comparisons = my_comparisons)+
theme(legend.position = "none",
axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15),
axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20)) +
ylab(lab) +
xlab("Sample Type")
p
return(p)
}
euk.p = beta_function(ps.euk, "wunifrac", "Weighted Unifrac Distances")
euk.p
pdf("../results/wunifrac-boxplots.pdf", height=5, width=10)
print(euk.p)
dev.off()
?stat_compare_means
source("~/Documents/PhD/waves22/code/data-prep.R")
nrow(euk_count_table) #ASVs
#18S
sum(euk_samp.counts$Reads) #reads
rm(list=ls())
graphics.off()
library(phyloseq)
library(RColorBrewer)
library(tidyr)
library(ggplot2)
#library(vegan)
#source("00-solman-functions.R")
# library(BiodiversityR) #for rank abundance curves
library(dplyr)
library(cowplot)
library(reshape)
library(funrar) #for make relative
library(stringr) #mutate function
library(gridExtra) #for exporting as pdf
library(scales)
#devtools::install_github("gmteunisse/fantaxtic")
library(fantaxtic)
library(tidyverse)
library(patchwork)
library(ggpubr)
#load data
ps.pro <- readRDS("../data/16S-phylo-object.rds")
ps.euk <- readRDS("../data/18S-phylo-object.rds")
#remove the 2 most abundant taxa from ps.euk
#which ASVs have the most counts?
tax = data.frame(tax_table(ps.euk))
x = data.frame(sort(taxa_sums(ps.euk), decreasing = FALSE))
names(x) = "value"
y = x %>%
top_n(2, value)
View(y)
z = tax[rownames(tax) %in% rownames(y),]
allTaxa = taxa_names(ps.euk)
View(z)
source("~/Documents/PhD/waves22/code/community-profiles.R")
source("~/Documents/PhD/waves22/code/data-prep.R")
source("~/Documents/PhD/waves22/code/community-profiles.R")
